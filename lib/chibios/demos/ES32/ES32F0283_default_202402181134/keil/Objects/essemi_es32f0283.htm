<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [Objects\essemi_es32f0283.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image Objects\essemi_es32f0283.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6180002: Last Updated: Tue Feb  6 17:43:32 2024
<BR><P>
<H3>Maximum Stack Usage =        868 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; protocol_task &rArr; keyboard_task &rArr; matrix_task &rArr; generate_tick_event &rArr; action_exec &rArr; action_tapping_process &rArr; process_tapping &rArr; waiting_buffer_scan_tap &rArr; process_record &rArr; process_record_handler &rArr; process_action &rArr;  process_record (Cycle)
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[31]">__port_exit_from_isr</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[263]">process_action</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[26c]">process_record</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[4]">BusFault_Handler</a> from vectors_1.o(.text) referenced from vectors_1.o(RESET)
 <LI><a href="#[b]">DebugMon_Handler</a> from vectors_1.o(.text) referenced from vectors_1.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from hal_lld.o(.text.HardFault_Handler) referenced from vectors_1.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from vectors_1.o(.text) referenced from vectors_1.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from chcore.o(.text.NMI_Handler) referenced from vectors_1.o(RESET)
 <LI><a href="#[d]">PendSV_Handler</a> from vectors_1.o(.text) referenced from vectors_1.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from cstartup_1.o(.text) referenced from vectors_1.o(RESET)
 <LI><a href="#[a]">SVC_Handler</a> from vectors_1.o(.text) referenced from vectors_1.o(RESET)
 <LI><a href="#[e]">SysTick_Handler</a> from hal_st_lld.o(.text.SysTick_Handler) referenced from vectors_1.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from vectors_1.o(.text) referenced from vectors_1.o(RESET)
 <LI><a href="#[6]">Vector1C</a> from vectors_1.o(.text) referenced from vectors_1.o(RESET)
 <LI><a href="#[7]">Vector20</a> from vectors_1.o(.text) referenced from vectors_1.o(RESET)
 <LI><a href="#[8]">Vector24</a> from vectors_1.o(.text) referenced from vectors_1.o(RESET)
 <LI><a href="#[9]">Vector28</a> from vectors_1.o(.text) referenced from vectors_1.o(RESET)
 <LI><a href="#[c]">Vector34</a> from vectors_1.o(.text) referenced from vectors_1.o(RESET)
 <LI><a href="#[f]">Vector40</a> from vectors_1.o(.text) referenced from vectors_1.o(RESET)
 <LI><a href="#[10]">Vector44</a> from vectors_1.o(.text) referenced from vectors_1.o(RESET)
 <LI><a href="#[11]">Vector48</a> from vectors_1.o(.text) referenced from vectors_1.o(RESET)
 <LI><a href="#[12]">Vector4C</a> from vectors_1.o(.text) referenced from vectors_1.o(RESET)
 <LI><a href="#[13]">Vector50</a> from vectors_1.o(.text) referenced from vectors_1.o(RESET)
 <LI><a href="#[14]">Vector54</a> from vectors_1.o(.text) referenced from vectors_1.o(RESET)
 <LI><a href="#[15]">Vector58</a> from vectors_1.o(.text) referenced from vectors_1.o(RESET)
 <LI><a href="#[16]">Vector5C</a> from vectors_1.o(.text) referenced from vectors_1.o(RESET)
 <LI><a href="#[17]">Vector60</a> from vectors_1.o(.text) referenced from vectors_1.o(RESET)
 <LI><a href="#[18]">Vector64</a> from vectors_1.o(.text) referenced from vectors_1.o(RESET)
 <LI><a href="#[19]">Vector68</a> from vectors_1.o(.text) referenced from vectors_1.o(RESET)
 <LI><a href="#[1a]">Vector6C</a> from vectors_1.o(.text) referenced from vectors_1.o(RESET)
 <LI><a href="#[1b]">Vector70</a> from vectors_1.o(.text) referenced from vectors_1.o(RESET)
 <LI><a href="#[1c]">Vector74</a> from vectors_1.o(.text) referenced from vectors_1.o(RESET)
 <LI><a href="#[1d]">Vector78</a> from vectors_1.o(.text) referenced from vectors_1.o(RESET)
 <LI><a href="#[1e]">Vector7C</a> from vectors_1.o(.text) referenced from vectors_1.o(RESET)
 <LI><a href="#[1f]">Vector80</a> from vectors_1.o(.text) referenced from vectors_1.o(RESET)
 <LI><a href="#[20]">Vector84</a> from vectors_1.o(.text) referenced from vectors_1.o(RESET)
 <LI><a href="#[21]">Vector88</a> from vectors_1.o(.text) referenced from vectors_1.o(RESET)
 <LI><a href="#[22]">Vector8C</a> from vectors_1.o(.text) referenced from vectors_1.o(RESET)
 <LI><a href="#[23]">Vector90</a> from vectors_1.o(.text) referenced from vectors_1.o(RESET)
 <LI><a href="#[24]">Vector94</a> from vectors_1.o(.text) referenced from vectors_1.o(RESET)
 <LI><a href="#[25]">Vector98</a> from vectors_1.o(.text) referenced from vectors_1.o(RESET)
 <LI><a href="#[26]">Vector9C</a> from vectors_1.o(.text) referenced from vectors_1.o(RESET)
 <LI><a href="#[27]">VectorA0</a> from vectors_1.o(.text) referenced from vectors_1.o(RESET)
 <LI><a href="#[28]">VectorA4</a> from vectors_1.o(.text) referenced from vectors_1.o(RESET)
 <LI><a href="#[29]">VectorA8</a> from vectors_1.o(.text) referenced from vectors_1.o(RESET)
 <LI><a href="#[2a]">VectorAC</a> from vectors_1.o(.text) referenced from vectors_1.o(RESET)
 <LI><a href="#[2b]">VectorB0</a> from vectors_1.o(.text) referenced from vectors_1.o(RESET)
 <LI><a href="#[2c]">VectorB4</a> from vectors_1.o(.text) referenced from vectors_1.o(RESET)
 <LI><a href="#[2d]">VectorB8</a> from vectors_1.o(.text) referenced from vectors_1.o(RESET)
 <LI><a href="#[2e]">VectorBC</a> from hal_usb_lld.o(.text.VectorBC) referenced from vectors_1.o(RESET)
 <LI><a href="#[33]">__idle_thread</a> from chinstances.o(.text.__idle_thread) referenced from chinstances.o(.text.chInstanceObjectInit)
 <LI><a href="#[30]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from cstartup_1.o(.text)
 <LI><a href="#[31]">__port_exit_from_isr</a> from chcoreasm_1.o(.text) referenced from chcore.o(.text.__port_irq_epilogue)
 <LI><a href="#[32]">__port_switch_from_isr</a> from chcoreasm_1.o(.text) referenced from chcore.o(.text.__port_irq_epilogue)
 <LI><a href="#[35]">__port_thread_start</a> from chcoreasm_1.o(.text) referenced from chthreads.o(.text.chThdCreateSuspendedI)
 <LI><a href="#[34]">__sch_wakeup</a> from chschd.o(.text.__sch_wakeup) referenced from chschd.o(.text.chSchGoSleepTimeoutS)
 <LI><a href="#[47]">_get</a> from usb_driver.o(.text._get) referenced from usb_driver.o(.rodata.vmt)
 <LI><a href="#[49]">_gett</a> from usb_driver.o(.text._gett) referenced from usb_driver.o(.rodata.vmt)
 <LI><a href="#[46]">_put</a> from usb_driver.o(.text._put) referenced from usb_driver.o(.rodata.vmt)
 <LI><a href="#[48]">_putt</a> from usb_driver.o(.text._putt) referenced from usb_driver.o(.rodata.vmt)
 <LI><a href="#[45]">_read</a> from usb_driver.o(.text._read) referenced from usb_driver.o(.rodata.vmt)
 <LI><a href="#[4b]">_readt</a> from usb_driver.o(.text._readt) referenced from usb_driver.o(.rodata.vmt)
 <LI><a href="#[3d]">_usb_ep0in</a> from hal_usb.o(.text._usb_ep0in) referenced from hal_usb_lld.o(.rodata.ep0config)
 <LI><a href="#[3e]">_usb_ep0out</a> from hal_usb.o(.text._usb_ep0out) referenced from hal_usb_lld.o(.rodata.ep0config)
 <LI><a href="#[3c]">_usb_ep0setup</a> from hal_usb.o(.text._usb_ep0setup) referenced from hal_usb_lld.o(.rodata.ep0config)
 <LI><a href="#[44]">_write</a> from usb_driver.o(.text._write) referenced from usb_driver.o(.rodata.vmt)
 <LI><a href="#[4a]">_writet</a> from usb_driver.o(.text._writet) referenced from usb_driver.o(.rodata.vmt)
 <LI><a href="#[3f]">dummy_usb_cb</a> from usb_main.o(.text.dummy_usb_cb) referenced from usb_main.o(.rodata.shared_ep_config)
 <LI><a href="#[38]">ibnotify</a> from usb_driver.o(.text.ibnotify) referenced from usb_driver.o(.text.qmkusbObjectInit)
 <LI><a href="#[36]">keyboard_idle_timer_cb</a> from usb_main.o(.text.keyboard_idle_timer_cb) referenced from usb_main.o(.text.keyboard_idle_timer_cb)
 <LI><a href="#[36]">keyboard_idle_timer_cb</a> from usb_main.o(.text.keyboard_idle_timer_cb) referenced from usb_main.o(.text.usb_requests_hook_cb)
 <LI><a href="#[4c]">keyboard_leds</a> from usb_main.o(.text.keyboard_leds) referenced from chibios.o(.data.chibios_driver)
 <LI><a href="#[2f]">main</a> from main.o(.text.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[51]">null_sendchar_func</a> from print.o(.text.null_sendchar_func) referenced from print.o(.data.func)
 <LI><a href="#[39]">obnotify</a> from usb_driver.o(.text.obnotify) referenced from usb_driver.o(.text.qmkusbObjectInit)
 <LI><a href="#[50]">send_extra</a> from usb_main.o(.text.send_extra) referenced from chibios.o(.data.chibios_driver)
 <LI><a href="#[4d]">send_keyboard</a> from usb_main.o(.text.send_keyboard) referenced from chibios.o(.data.chibios_driver)
 <LI><a href="#[4f]">send_mouse</a> from usb_main.o(.text.send_mouse) referenced from chibios.o(.data.chibios_driver)
 <LI><a href="#[4e]">send_nkro</a> from usb_main.o(.text.send_nkro) referenced from chibios.o(.data.chibios_driver)
 <LI><a href="#[37]">sendchar</a> from sendchar.o(.text.sendchar) referenced from keyboard.o(.text.keyboard_setup)
 <LI><a href="#[3b]">set_led_transfer_cb</a> from usb_main.o(.text.set_led_transfer_cb) referenced from usb_main.o(.text.usb_requests_hook_cb)
 <LI><a href="#[3a]">update_fn</a> from timer.o(.text.update_fn) referenced from timer.o(.text.update_fn)
 <LI><a href="#[40]">usb_event_cb</a> from usb_main.o(.text.usb_event_cb) referenced from usb_main.o(.rodata.usbcfg)
 <LI><a href="#[41]">usb_get_descriptor_cb</a> from usb_main.o(.text.usb_get_descriptor_cb) referenced from usb_main.o(.rodata.usbcfg)
 <LI><a href="#[42]">usb_requests_hook_cb</a> from usb_main.o(.text.usb_requests_hook_cb) referenced from usb_main.o(.rodata.usbcfg)
 <LI><a href="#[43]">usb_sof_cb</a> from usb_main.o(.text.usb_sof_cb) referenced from usb_main.o(.rodata.usbcfg)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[30]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> cstartup_1.o(.text)
</UL>
<P><STRONG><a name="[2c9]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[52]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[6a]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[2ca]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[2cb]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[2cc]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[2cd]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[2ce]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, cstartup_1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Reset_Handler &rArr; __early_init
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__early_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vectors_1.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors_1.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors_1.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>DebugMon_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors_1.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors_1.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors_1.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors_1.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>PendSV_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors_1.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors_1.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>SVC_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors_1.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors_1.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors_1.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors_1.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>Vector1C</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors_1.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors_1.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>Vector20</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors_1.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors_1.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>Vector24</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors_1.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors_1.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>Vector28</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors_1.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors_1.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>Vector34</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors_1.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors_1.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>Vector40</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors_1.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors_1.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>Vector44</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors_1.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors_1.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>Vector48</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors_1.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors_1.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>Vector4C</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors_1.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors_1.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>Vector50</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors_1.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors_1.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>Vector54</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors_1.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors_1.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>Vector58</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors_1.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors_1.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>Vector5C</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors_1.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors_1.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>Vector60</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors_1.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors_1.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>Vector64</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors_1.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors_1.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>Vector68</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors_1.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors_1.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>Vector6C</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors_1.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors_1.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>Vector70</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors_1.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors_1.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>Vector74</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors_1.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors_1.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>Vector78</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors_1.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors_1.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>Vector7C</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors_1.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors_1.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>Vector80</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors_1.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors_1.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>Vector84</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors_1.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors_1.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>Vector88</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors_1.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors_1.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>Vector8C</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors_1.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors_1.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>Vector90</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors_1.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors_1.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>Vector94</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors_1.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors_1.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>Vector98</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors_1.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors_1.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>Vector9C</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors_1.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors_1.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>VectorA0</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors_1.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors_1.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>VectorA4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors_1.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors_1.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>VectorA8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors_1.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors_1.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>VectorAC</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors_1.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors_1.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>VectorB0</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors_1.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors_1.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>VectorB4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors_1.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors_1.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>VectorB8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors_1.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors_1.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>_unhandled_exception</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, vectors_1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_unhandled_exception
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_unhandled_exception
</UL>

<P><STRONG><a name="[8e]"></a>__port_switch</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, chcoreasm_1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchDoPreemption
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sch_reschedule_ahead
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchGoSleepS
</UL>

<P><STRONG><a name="[35]"></a>__port_thread_start</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, chcoreasm_1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __port_thread_start &rArr; chThdExit &rArr; chThdExitS &rArr; chSchGoSleepS &rArr; ch_pqueue_remove_highest
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdExit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> chthreads.o(.text.chThdCreateSuspendedI)
</UL>
<P><STRONG><a name="[32]"></a>__port_switch_from_isr</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, chcoreasm_1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __port_switch_from_isr &rArr; chSchDoPreemption &rArr; __sch_ready_ahead &rArr; ch_pqueue_insert_ahead
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchDoPreemption
</UL>
<BR>[Address Reference Count : 1]<UL><LI> chcore.o(.text.__port_irq_epilogue)
</UL>
<P><STRONG><a name="[31]"></a>__port_exit_from_isr</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, chcoreasm_1.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> chcore.o(.text.__port_irq_epilogue)
</UL>
<P><STRONG><a name="[58]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_rcu_pll0_init
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_read32
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_idle_timer_cb
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_requests_hook_cb
</UL>

<P><STRONG><a name="[1ad]"></a>__aeabi_lmul</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, llmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_lmul
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_read32
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_idle_timer_cb
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_requests_hook_cb
</UL>

<P><STRONG><a name="[2cf]"></a>_ll_mul</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, llmul.o(.text), UNUSED)

<P><STRONG><a name="[13d]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obqWriteTimeout
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ibqReadTimeout
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_keyboard
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debounce
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_scan
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_6kro_report
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_block
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_block
</UL>

<P><STRONG><a name="[2d0]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[2d1]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[5c]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[2d2]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[2d3]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[5b]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmkusbSOFHookI
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_event_queue_init
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_block
</UL>

<P><STRONG><a name="[168]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_driver_erase
</UL>

<P><STRONG><a name="[73]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VectorBC
</UL>

<P><STRONG><a name="[5d]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[13c]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debounce
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_scan
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_6kro_report
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_update_block
</UL>

<P><STRONG><a name="[5e]"></a>__aeabi_dadd</STRONG> (Thumb, 328 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_rcu_sys_init
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>

<P><STRONG><a name="[62]"></a>__aeabi_dsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[63]"></a>__aeabi_drsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[64]"></a>__aeabi_dmul</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_rcu_sys_init
</UL>

<P><STRONG><a name="[65]"></a>__aeabi_ddiv</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_rcu_sys_init
</UL>

<P><STRONG><a name="[66]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_rcu_sys_init
</UL>

<P><STRONG><a name="[67]"></a>__aeabi_ui2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_rcu_sys_init
</UL>

<P><STRONG><a name="[68]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2uiz &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_rcu_sys_init
</UL>

<P><STRONG><a name="[1f0]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, uidiv_div0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_rcu_sys_init
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_rcu_pll0_init
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_delay_1us
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_uart_setting_baudrate
</UL>

<P><STRONG><a name="[9a]"></a>__aeabi_uidivmod</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, uidiv_div0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_usb_ep0in
</UL>

<P><STRONG><a name="[5a]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[2d4]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[59]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[2d5]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[5f]"></a>__aeabi_lasr</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, llsshr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_lasr
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[2d6]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[2d7]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[61]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[60]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_clz
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
</UL>

<P><STRONG><a name="[53]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[2d8]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hal_lld.o(.text.HardFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HardFault_Handler &rArr; rt_hw_hard_fault_exception &rArr; es_test_printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vectors_1.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, chcore.o(.text.NMI_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = NMI_Handler &rArr; port_unlock_from_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_unlock_from_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vectors_1.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>SysTick_Handler</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, hal_st_lld.o(.text.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = SysTick_Handler &rArr; osalOsTimerHandlerI &rArr; chSysTimerHandlerI &rArr; chVTDoTickI &rArr; ch_dlist_insert &rArr; ch_dlist_insert_before
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__port_irq_epilogue
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalSysUnlockFromISR
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalOsTimerHandlerI
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalSysLockFromISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vectors_1.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>VectorBC</STRONG> (Thumb, 1072 bytes, Stack size 80 bytes, hal_usb_lld.o(.text.VectorBC))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = VectorBC &rArr; handle_ep0 &rArr; _usb_ep0in &rArr; usbStartTransmitI &rArr; usb_lld_start_in &rArr; usbd_ep_start_write &rArr; usbd_write_packet &rArr; usb_ep_in_data_avail &rArr; es_usbd_ep_tx_ready_state
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__port_irq_epilogue
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_delay_1us
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_ep0
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_write_packet
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_usb_ep_out_data_avail
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalSysUnlockFromISR
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalThreadResumeI
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalSysLockFromISR
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_usbd_ep_read_packet_8bit
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;musb_set_active_ep
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;musb_get_active_ep
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vectors_1.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>__chibios_override___early_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, board.o(.text.__chibios_override___early_init))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__early_init
</UL>

<P><STRONG><a name="[c7]"></a>__chibios_override_boardInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, board.o(.text.__chibios_override_boardInit))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boardInit
</UL>

<P><STRONG><a name="[85]"></a>__core_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, chmemcore.o(.text.__core_init))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__oslib_init
</UL>

<P><STRONG><a name="[54]"></a>__early_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, chibios.o(.text.__early_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __early_init
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__chibios_override___early_init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;early_hardware_init_post
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;early_hardware_init_pre
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Handler
</UL>

<P><STRONG><a name="[70]"></a>__port_irq_epilogue</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, chcore.o(.text.__port_irq_epilogue))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __port_irq_epilogue &rArr; chSchIsPreemptionRequired
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchIsPreemptionRequired
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_lock_from_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VectorBC
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[d1]"></a>__thd_object_init</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, chthreads.o(.text.__thd_object_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __thd_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdCreateSuspendedI
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chInstanceObjectInit
</UL>

<P><STRONG><a name="[182]"></a>_pal_lld_init</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, hal_pal_lld.o(.text._pal_lld_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _pal_lld_init
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halInit
</UL>

<P><STRONG><a name="[1cd]"></a>_pal_lld_setgroupmode</STRONG> (Thumb, 12 bytes, Stack size 12 bytes, hal_pal_lld.o(.text._pal_lld_setgroupmode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _pal_lld_setgroupmode
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPinOutput_writeLow
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPinInputHigh_atomic
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init_ports
</UL>

<P><STRONG><a name="[3d]"></a>_usb_ep0in</STRONG> (Thumb, 322 bytes, Stack size 32 bytes, hal_usb.o(.text._usb_ep0in))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = _usb_ep0in &rArr; usbStartTransmitI &rArr; usb_lld_start_in &rArr; usbd_ep_start_write &rArr; usbd_write_packet &rArr; usb_ep_in_data_avail &rArr; es_usbd_ep_tx_ready_state
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_lld_stall_in
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_lld_stall_out
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbStartTransmitI
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbStartReceiveI
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hword
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalSysUnlockFromISR
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalSysLockFromISR
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_ep0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_usb_lld.o(.rodata.ep0config)
</UL>
<P><STRONG><a name="[3e]"></a>_usb_ep0out</STRONG> (Thumb, 262 bytes, Stack size 24 bytes, hal_usb.o(.text._usb_ep0out))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _usb_ep0out &rArr; usbStartTransmitI &rArr; usb_lld_start_in &rArr; usbd_ep_start_write &rArr; usbd_write_packet &rArr; usb_ep_in_data_avail &rArr; es_usbd_ep_tx_ready_state
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_lld_stall_in
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_lld_stall_out
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbStartTransmitI
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalSysUnlockFromISR
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalSysLockFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_ep0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_usb_lld.o(.rodata.ep0config)
</UL>
<P><STRONG><a name="[3c]"></a>_usb_ep0setup</STRONG> (Thumb, 346 bytes, Stack size 24 bytes, hal_usb.o(.text._usb_ep0setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _usb_ep0setup &rArr; usbStartTransmitI &rArr; usb_lld_start_in &rArr; usbd_ep_start_write &rArr; usbd_write_packet &rArr; usb_ep_in_data_avail &rArr; es_usbd_ep_tx_ready_state
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_lld_read_setup
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_lld_stall_in
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_lld_stall_out
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbStartTransmitI
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbStartReceiveI
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hword
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_handler
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalSysUnlockFromISR
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalSysLockFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_ep0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_usb_lld.o(.rodata.ep0config)
</UL>
<P><STRONG><a name="[a4]"></a>action_exec</STRONG> (Thumb, 188 bytes, Stack size 56 bytes, action.o(.text.action_exec))
<BR><BR>[Stack]<UL><LI>Max Depth = 708<LI>Call Chain = action_exec &rArr; action_tapping_process &rArr; process_tapping &rArr; waiting_buffer_scan_tap &rArr; process_record &rArr; process_record_handler &rArr; process_action &rArr;  process_record (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_tapping_process
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_weak_mods
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_event
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IS_NOEVENT
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IS_EVENT
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_process_record_quantum
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_tick_event
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_task
</UL>

<P><STRONG><a name="[ab]"></a>action_for_key</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, keymap_common.o(.text.action_for_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = action_for_key &rArr; action_for_keycode &rArr; keycode_config
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keymap_key_to_keycode
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_for_keycode
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layer_switch_get_action
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_or_get_action
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layer_switch_get_layer
</UL>

<P><STRONG><a name="[ad]"></a>action_for_keycode</STRONG> (Thumb, 704 bytes, Stack size 64 bytes, keymap_common.o(.text.action_for_keycode))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = action_for_keycode &rArr; keycode_config
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_config
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keycode_config
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_for_key
</UL>

<P><STRONG><a name="[aa]"></a>action_tapping_process</STRONG> (Thumb, 344 bytes, Stack size 56 bytes, action_tapping.o(.text.action_tapping_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 652<LI>Call Chain = action_tapping_process &rArr; process_tapping &rArr; waiting_buffer_scan_tap &rArr; process_record &rArr; process_record_handler &rArr; process_action &rArr;  process_record (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_keyboard
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;waiting_buffer_clear
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;waiting_buffer_enq
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IS_EVENT
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_tapping
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_record
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_exec
</UL>

<P><STRONG><a name="[b6]"></a>add_key</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, action_util.o(.text.add_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = add_key &rArr; add_key_to_report &rArr; add_key_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_key_to_report
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_grave_esc
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_code
</UL>

<P><STRONG><a name="[b8]"></a>add_key_byte</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, report.o(.text.add_key_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = add_key_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_key_to_report
</UL>

<P><STRONG><a name="[b7]"></a>add_key_to_report</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, report.o(.text.add_key_to_report))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = add_key_to_report &rArr; add_key_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_key_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_key
</UL>

<P><STRONG><a name="[264]"></a>add_mods</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, action_util.o(.text.add_mods))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = add_mods
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_action
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_mods
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_code
</UL>

<P><STRONG><a name="[b9]"></a>add_oneshot_mods</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, action_util.o(.text.add_oneshot_mods))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = add_oneshot_mods &rArr; oneshot_mods_changed_kb &rArr; oneshot_mods_changed_user
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oneshot_mods_changed_kb
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_action
</UL>

<P><STRONG><a name="[265]"></a>add_weak_mods</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, action_util.o(.text.add_weak_mods))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = add_weak_mods
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_action
</UL>

<P><STRONG><a name="[1a5]"></a>ald_usb_dev_connect</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ald_usb.o(.text.ald_usb_dev_connect))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_usb_driver
</UL>

<P><STRONG><a name="[1a2]"></a>ald_usb_dev_disconnect</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ald_usb.o(.text.ald_usb_dev_disconnect))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_usb_driver
</UL>

<P><STRONG><a name="[2be]"></a>ald_usb_dev_ep_config</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, ald_usb.o(.text.ald_usb_dev_ep_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ald_usb_dev_ep_config
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_lld_init_endpoint
</UL>

<P><STRONG><a name="[2c1]"></a>ald_usb_dev_ep_stall</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, ald_usb.o(.text.ald_usb_dev_ep_stall))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ald_usb_dev_ep_stall
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_lld_stall_in
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_lld_stall_out
</UL>

<P><STRONG><a name="[2bc]"></a>ald_usb_dev_ep_stall_clear</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, ald_usb.o(.text.ald_usb_dev_ep_stall_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ald_usb_dev_ep_stall_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_lld_clear_out
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_lld_clear_in
</UL>

<P><STRONG><a name="[c0]"></a>ald_usb_dev_suspend_enable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ald_usb.o(.text.ald_usb_dev_suspend_enable))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ald_usb_device_components_init
</UL>

<P><STRONG><a name="[bb]"></a>ald_usb_device_components_init</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ald_usb.o(.text.ald_usb_device_components_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ald_usb_device_components_init &rArr; ald_usb_swcid_cidctrl
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ald_usb_dev_suspend_enable
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ald_usb_swcid_cidctrl
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ald_usb_swcid_host
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ald_usb_dppud_set
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ald_usb_otg_session_request
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_lld_start
</UL>

<P><STRONG><a name="[bd]"></a>ald_usb_dppud_set</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, ald_usb.o(.text.ald_usb_dppud_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ald_usb_dppud_set
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ald_usb_device_components_init
</UL>

<P><STRONG><a name="[171]"></a>ald_usb_ep_data_avail</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, ald_usb.o(.text.ald_usb_ep_data_avail))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ald_usb_ep_data_avail
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_usb_ep_out_data_avail
</UL>

<P><STRONG><a name="[2c0]"></a>ald_usb_fifo_config_set_no_assert</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, hal_usb_lld.o(.text.ald_usb_fifo_config_set_no_assert))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ald_usb_fifo_config_set_no_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_lld_init_endpoint
</UL>

<P><STRONG><a name="[2c4]"></a>ald_usb_int_enable</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, ald_usb.o(.text.ald_usb_int_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ald_usb_int_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_lld_start
</UL>

<P><STRONG><a name="[2c5]"></a>ald_usb_int_enable_ep</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, ald_usb.o(.text.ald_usb_int_enable_ep))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ald_usb_int_enable_ep
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_lld_start
</UL>

<P><STRONG><a name="[c1]"></a>ald_usb_int_register</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ald_usb.o(.text.ald_usb_int_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ald_usb_int_register &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_lld_start
</UL>

<P><STRONG><a name="[2c3]"></a>ald_usb_int_status_ep_get</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, ald_usb.o(.text.ald_usb_int_status_ep_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ald_usb_int_status_ep_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_lld_start
</UL>

<P><STRONG><a name="[2c2]"></a>ald_usb_int_status_get</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, ald_usb.o(.text.ald_usb_int_status_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ald_usb_int_status_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_lld_start
</UL>

<P><STRONG><a name="[c4]"></a>ald_usb_int_unregister</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ald_usb.o(.text.ald_usb_int_unregister))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ald_usb_int_unregister &rArr; __NVIC_DisableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_lld_stop
</UL>

<P><STRONG><a name="[bc]"></a>ald_usb_otg_session_request</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, ald_usb.o(.text.ald_usb_otg_session_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ald_usb_otg_session_request
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ald_usb_device_components_init
</UL>

<P><STRONG><a name="[be]"></a>ald_usb_swcid_cidctrl</STRONG> (Thumb, 44 bytes, Stack size 4 bytes, ald_usb.o(.text.ald_usb_swcid_cidctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ald_usb_swcid_cidctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ald_usb_device_components_init
</UL>

<P><STRONG><a name="[bf]"></a>ald_usb_swcid_host</STRONG> (Thumb, 44 bytes, Stack size 4 bytes, ald_usb.o(.text.ald_usb_swcid_host))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ald_usb_swcid_host
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ald_usb_device_components_init
</UL>

<P><STRONG><a name="[c6]"></a>boardInit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, chibios.o(.text.boardInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = boardInit
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__chibios_override_boardInit
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halInit
</UL>

<P><STRONG><a name="[c8]"></a>board_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, chibios.o(.text.board_init))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boardInit
</UL>

<P><STRONG><a name="[295]"></a>bootloader_jump</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, custom.o(.text.bootloader_jump))
<BR><BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_keyboard
</UL>

<P><STRONG><a name="[1d5]"></a>bootmagic</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, magic.o(.text.bootmagic))
<BR><BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;magic
</UL>

<P><STRONG><a name="[c9]"></a>chEvtBroadcastFlagsI</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, chevents.o(.text.chEvtBroadcastFlagsI))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = chEvtBroadcastFlagsI &rArr; chEvtSignalI &rArr; chSchReadyI &rArr; __sch_ready_behind &rArr; ch_pqueue_insert_behind
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chEvtSignalI
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalEventBroadcastFlagsI
</UL>

<P><STRONG><a name="[ca]"></a>chEvtSignalI</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, chevents.o(.text.chEvtSignalI))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = chEvtSignalI &rArr; chSchReadyI &rArr; __sch_ready_behind &rArr; ch_pqueue_insert_behind
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchReadyI
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chEvtBroadcastFlagsI
</UL>

<P><STRONG><a name="[cc]"></a>chInstanceObjectInit</STRONG> (Thumb, 140 bytes, Stack size 48 bytes, chinstances.o(.text.chInstanceObjectInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = chInstanceObjectInit &rArr; chThdCreateI &rArr; chSchReadyI &rArr; __sch_ready_behind &rArr; ch_pqueue_insert_behind
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dbg_object_init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vt_object_init
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rfcu_object_init
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_pqueue_init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdCreateI
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__thd_object_init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_init
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSysInit
</UL>

<P><STRONG><a name="[57]"></a>chSchDoPreemption</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, chschd.o(.text.chSchDoPreemption))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = chSchDoPreemption &rArr; __sch_ready_ahead &rArr; ch_pqueue_insert_ahead
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__port_switch
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sch_ready_ahead
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_pqueue_remove_highest
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__port_switch_from_isr
</UL>

<P><STRONG><a name="[d3]"></a>chSchGoSleepS</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, chschd.o(.text.chSchGoSleepS))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = chSchGoSleepS &rArr; ch_pqueue_remove_highest
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__port_switch
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_pqueue_remove_highest
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdExitS
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchGoSleepTimeoutS
</UL>

<P><STRONG><a name="[d4]"></a>chSchGoSleepTimeoutS</STRONG> (Thumb, 88 bytes, Stack size 48 bytes, chschd.o(.text.chSchGoSleepTimeoutS))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = chSchGoSleepTimeoutS &rArr; chVTDoSetI &rArr; vt_enqueue &rArr; ch_dlist_insert &rArr; ch_dlist_insert_before
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chVTDoResetI
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chVTDoSetI
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chVTIsArmedI
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchGoSleepS
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdEnqueueTimeoutS
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdSuspendTimeoutS
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdSleepS
</UL>

<P><STRONG><a name="[87]"></a>chSchIsPreemptionRequired</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, chschd.o(.text.chSchIsPreemptionRequired))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = chSchIsPreemptionRequired
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__port_irq_epilogue
</UL>

<P><STRONG><a name="[cb]"></a>chSchReadyI</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, chschd.o(.text.chSchReadyI))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = chSchReadyI &rArr; __sch_ready_behind &rArr; ch_pqueue_insert_behind
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sch_ready_behind
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdResumeI
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdCreateI
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdDoDequeueNextI
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chEvtSignalI
</UL>

<P><STRONG><a name="[d8]"></a>chSchRescheduleS</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, chschd.o(.text.chSchRescheduleS))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = chSchRescheduleS &rArr; __sch_reschedule_ahead &rArr; __sch_ready_ahead &rArr; ch_pqueue_insert_ahead
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sch_reschedule_ahead
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalOsRescheduleS
</UL>

<P><STRONG><a name="[d9]"></a>chSysInit</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, chsys.o(.text.chSysInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = chSysInit &rArr; chInstanceObjectInit &rArr; chThdCreateI &rArr; chSchReadyI &rArr; __sch_ready_behind &rArr; ch_pqueue_insert_behind
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chInstanceObjectInit
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSysUnlock
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__oslib_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_setup
</UL>

<P><STRONG><a name="[f5]"></a>chSysTimerHandlerI</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, chsys.o(.text.chSysTimerHandlerI))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = chSysTimerHandlerI &rArr; chVTDoTickI &rArr; ch_dlist_insert &rArr; ch_dlist_insert_before
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chVTDoTickI
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalOsTimerHandlerI
</UL>

<P><STRONG><a name="[d2]"></a>chThdCreateI</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, chthreads.o(.text.chThdCreateI))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = chThdCreateI &rArr; chSchReadyI &rArr; __sch_ready_behind &rArr; ch_pqueue_insert_behind
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdCreateSuspendedI
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchReadyI
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chInstanceObjectInit
</UL>

<P><STRONG><a name="[112]"></a>chThdCreateSuspendedI</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, chthreads.o(.text.chThdCreateSuspendedI))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = chThdCreateSuspendedI &rArr; __thd_object_init
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__thd_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdCreateI
</UL>

<P><STRONG><a name="[113]"></a>chThdDequeueAllI</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, chthreads.o(.text.chThdDequeueAllI))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = chThdDequeueAllI &rArr; chThdDoDequeueNextI &rArr; chSchReadyI &rArr; __sch_ready_behind &rArr; ch_pqueue_insert_behind
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdDoDequeueNextI
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_queue_notempty
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalThreadDequeueAllI
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalThreadDequeueAllI
</UL>

<P><STRONG><a name="[117]"></a>chThdEnqueueTimeoutS</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, chthreads.o(.text.chThdEnqueueTimeoutS))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = chThdEnqueueTimeoutS &rArr; chSchGoSleepTimeoutS &rArr; chVTDoSetI &rArr; vt_enqueue &rArr; ch_dlist_insert &rArr; ch_dlist_insert_before
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_queue_insert
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdGetSelfX
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchGoSleepTimeoutS
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalThreadEnqueueTimeoutS
</UL>

<P><STRONG><a name="[56]"></a>chThdExit</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, chthreads.o(.text.chThdExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = chThdExit &rArr; chThdExitS &rArr; chSchGoSleepS &rArr; ch_pqueue_remove_highest
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdExitS
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSysLock
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__port_thread_start
</UL>

<P><STRONG><a name="[11a]"></a>chThdExitS</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, chthreads.o(.text.chThdExitS))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = chThdExitS &rArr; chSchGoSleepS &rArr; ch_pqueue_remove_highest
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdGetSelfX
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchGoSleepS
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdExit
</UL>

<P><STRONG><a name="[11d]"></a>chThdResumeI</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, chthreads.o(.text.chThdResumeI))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = chThdResumeI &rArr; chSchReadyI &rArr; __sch_ready_behind &rArr; ch_pqueue_insert_behind
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchReadyI
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalThreadResumeI
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalThreadResumeI
</UL>

<P><STRONG><a name="[11e]"></a>chThdSleep</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, chthreads.o(.text.chThdSleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = chThdSleep &rArr; chThdSleepS &rArr; chSchGoSleepTimeoutS &rArr; chVTDoSetI &rArr; vt_enqueue &rArr; ch_dlist_insert &rArr; ch_dlist_insert_before
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdSleepS
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSysUnlock
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSysLock
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_action
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shutdown_quantum
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_usb_driver
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_pre_init
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_io_delay
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tap_code_delay
</UL>

<P><STRONG><a name="[120]"></a>chThdSuspendTimeoutS</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, chthreads.o(.text.chThdSuspendTimeoutS))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = chThdSuspendTimeoutS &rArr; chSchGoSleepTimeoutS &rArr; chVTDoSetI &rArr; vt_enqueue &rArr; ch_dlist_insert &rArr; ch_dlist_insert_before
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdGetSelfX
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchGoSleepTimeoutS
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalThreadSuspendTimeoutS
</UL>

<P><STRONG><a name="[d7]"></a>chVTDoResetI</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, chvt.o(.text.chVTDoResetI))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = chVTDoResetI &rArr; ch_dlist_dequeue
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_dlist_dequeue
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchGoSleepTimeoutS
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chVTResetI
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chVTResetI
</UL>

<P><STRONG><a name="[d5]"></a>chVTDoSetI</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, chvt.o(.text.chVTDoSetI))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = chVTDoSetI &rArr; vt_enqueue &rArr; ch_dlist_insert &rArr; ch_dlist_insert_before
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vt_enqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchGoSleepTimeoutS
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chVTSetI
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chVTSetI
</UL>

<P><STRONG><a name="[f6]"></a>chVTDoTickI</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, chvt.o(.text.chVTDoTickI))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = chVTDoTickI &rArr; ch_dlist_insert &rArr; ch_dlist_insert_before
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSysLockFromISR
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSysUnlockFromISR
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_dlist_notempty
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_dlist_dequeue
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_dlist_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSysTimerHandlerI
</UL>

<P><STRONG><a name="[16b]"></a>clamp_length</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, eeprom_transient.o(.text.clamp_length))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = clamp_length
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_block
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_block
</UL>

<P><STRONG><a name="[b4]"></a>clear_keyboard</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, action.o(.text.clear_keyboard))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = clear_keyboard &rArr; clear_keyboard_but_mods &rArr; clear_keyboard_but_mods_and_keys &rArr; send_keyboard_report &rArr; send_6kro_report &rArr; get_mods_for_report &rArr; clear_oneshot_mods &rArr; oneshot_mods_changed_kb &rArr; oneshot_mods_changed_user
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_keyboard_but_mods
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_mods
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_tapping_process
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_magic
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shutdown_quantum
</UL>

<P><STRONG><a name="[12e]"></a>clear_keyboard_but_mods</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, action.o(.text.clear_keyboard_but_mods))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = clear_keyboard_but_mods &rArr; clear_keyboard_but_mods_and_keys &rArr; send_keyboard_report &rArr; send_6kro_report &rArr; get_mods_for_report &rArr; clear_oneshot_mods &rArr; oneshot_mods_changed_kb &rArr; oneshot_mods_changed_user
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_keyboard_but_mods_and_keys
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_keys
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_keyboard
</UL>

<P><STRONG><a name="[130]"></a>clear_keyboard_but_mods_and_keys</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, action.o(.text.clear_keyboard_but_mods_and_keys))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = clear_keyboard_but_mods_and_keys &rArr; send_keyboard_report &rArr; send_6kro_report &rArr; get_mods_for_report &rArr; clear_oneshot_mods &rArr; oneshot_mods_changed_kb &rArr; oneshot_mods_changed_user
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_keyboard_report
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_weak_mods
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_keyboard_but_mods
</UL>

<P><STRONG><a name="[12f]"></a>clear_keys</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, action_util.o(.text.clear_keys))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = clear_keys
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_keys_from_report
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_keyboard_but_mods
</UL>

<P><STRONG><a name="[132]"></a>clear_keys_from_report</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, report.o(.text.clear_keys_from_report))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_keys
</UL>

<P><STRONG><a name="[12d]"></a>clear_mods</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, action_util.o(.text.clear_mods))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_keyboard
</UL>

<P><STRONG><a name="[133]"></a>clear_oneshot_layer_state</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, action_util.o(.text.clear_oneshot_layer_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = clear_oneshot_layer_state &rArr; layer_off &rArr; layer_state_set &rArr; layer_state_set_kb &rArr; layer_state_set_user
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layer_off
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_oneshot_layer
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_oneshot_layer
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_oneshot_layer_state
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_action
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_record
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oneshot_set
</UL>

<P><STRONG><a name="[138]"></a>clear_oneshot_mods</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, action_util.o(.text.clear_oneshot_mods))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = clear_oneshot_mods &rArr; oneshot_mods_changed_kb &rArr; oneshot_mods_changed_user
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oneshot_mods_changed_kb
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_mods_for_report
</UL>

<P><STRONG><a name="[a7]"></a>clear_weak_mods</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, action_util.o(.text.clear_weak_mods))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_exec
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_keyboard_but_mods_and_keys
</UL>

<P><STRONG><a name="[139]"></a>debounce</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, sym_defer_g.o(.text.debounce))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = debounce &rArr; timer_elapsed_fast &rArr; timer_elapsed32 &rArr; timer_read32 &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_elapsed_fast
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_read_fast
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_scan
</UL>

<P><STRONG><a name="[1db]"></a>debounce_init</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, sym_defer_g.o(.text.debounce_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = debounce_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_init
</UL>

<P><STRONG><a name="[273]"></a>debug_action</STRONG> (Thumb, 160 bytes, Stack size 12 bytes, action.o(.text.debug_action))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = debug_action
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_record_handler
</UL>

<P><STRONG><a name="[a6]"></a>debug_event</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, action.o(.text.debug_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = debug_event
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_exec
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_tapping
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_record
</UL>

<P><STRONG><a name="[b2]"></a>debug_record</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, action.o(.text.debug_record))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = debug_record &rArr; debug_event
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_event
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_tapping_process
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_waiting_buffer
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_tapping_key
</UL>

<P><STRONG><a name="[146]"></a>default_layer_and</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, action_layer.o(.text.default_layer_and))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = default_layer_and &rArr; default_layer_state_set &rArr; default_layer_state_set_kb &rArr; default_layer_state_set_user
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_layer_state_set
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_action
</UL>

<P><STRONG><a name="[14b]"></a>default_layer_debug</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, action_layer.o(.text.default_layer_debug))
<BR><BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_record_handler
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_layer_state_set
</UL>

<P><STRONG><a name="[148]"></a>default_layer_or</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, action_layer.o(.text.default_layer_or))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = default_layer_or &rArr; default_layer_state_set &rArr; default_layer_state_set_kb &rArr; default_layer_state_set_user
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_layer_state_set
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_action
</UL>

<P><STRONG><a name="[149]"></a>default_layer_set</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, action_layer.o(.text.default_layer_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = default_layer_set &rArr; default_layer_state_set &rArr; default_layer_state_set_kb &rArr; default_layer_state_set_user
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_layer_state_set
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_action
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;magic
</UL>

<P><STRONG><a name="[14a]"></a>default_layer_state_set_kb</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, action_layer.o(.text.default_layer_state_set_kb))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = default_layer_state_set_kb &rArr; default_layer_state_set_user
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_layer_state_set_user
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_layer_state_set
</UL>

<P><STRONG><a name="[14c]"></a>default_layer_state_set_user</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, action_layer.o(.text.default_layer_state_set_user))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = default_layer_state_set_user
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_layer_state_set_kb
</UL>

<P><STRONG><a name="[14d]"></a>default_layer_xor</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, action_layer.o(.text.default_layer_xor))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = default_layer_xor &rArr; default_layer_state_set &rArr; default_layer_state_set_kb &rArr; default_layer_state_set_user
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_layer_state_set
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_action
</UL>

<P><STRONG><a name="[14e]"></a>del_key</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, action_util.o(.text.del_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = del_key &rArr; del_key_from_report &rArr; del_key_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_key_from_report
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_grave_esc
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unregister_code
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_code
</UL>

<P><STRONG><a name="[150]"></a>del_key_byte</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, report.o(.text.del_key_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = del_key_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_key_from_report
</UL>

<P><STRONG><a name="[14f]"></a>del_key_from_report</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, report.o(.text.del_key_from_report))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = del_key_from_report &rArr; del_key_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_key_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_key
</UL>

<P><STRONG><a name="[268]"></a>del_mods</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, action_util.o(.text.del_mods))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = del_mods
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_action
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unregister_mods
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unregister_code
</UL>

<P><STRONG><a name="[151]"></a>del_oneshot_locked_mods</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, action_util.o(.text.del_oneshot_locked_mods))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = del_oneshot_locked_mods &rArr; oneshot_locked_mods_changed_kb &rArr; oneshot_locked_mods_changed_user
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oneshot_locked_mods_changed_kb
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_action
</UL>

<P><STRONG><a name="[153]"></a>del_oneshot_mods</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, action_util.o(.text.del_oneshot_mods))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = del_oneshot_mods &rArr; oneshot_mods_changed_kb &rArr; oneshot_mods_changed_user
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oneshot_mods_changed_kb
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_action
</UL>

<P><STRONG><a name="[269]"></a>del_weak_mods</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, action_util.o(.text.del_weak_mods))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = del_weak_mods
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_action
</UL>

<P><STRONG><a name="[7e]"></a>early_hardware_init_post</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, chibios.o(.text.early_hardware_init_post))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__early_init
</UL>

<P><STRONG><a name="[7c]"></a>early_hardware_init_pre</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, chibios.o(.text.early_hardware_init_pre))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__early_init
</UL>

<P><STRONG><a name="[154]"></a>eeconfig_disable</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, eeconfig.o(.text.eeconfig_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = eeconfig_disable &rArr; eeprom_update_word &rArr; eeprom_read_word &rArr; eeprom_read_block &rArr; clamp_length
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_update_word
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_driver_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_record_quantum
</UL>

<P><STRONG><a name="[157]"></a>eeconfig_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, eeconfig.o(.text.eeconfig_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = eeconfig_init &rArr; eeconfig_init_quantum &rArr; eeconfig_init_kb &rArr; eeconfig_init_user &rArr; eeconfig_update_user &rArr; eeprom_update_dword &rArr; eeprom_read_dword &rArr; eeprom_read_block &rArr; clamp_length
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeconfig_init_quantum
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;magic
</UL>

<P><STRONG><a name="[159]"></a>eeconfig_init_kb</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, eeconfig.o(.text.eeconfig_init_kb))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = eeconfig_init_kb &rArr; eeconfig_init_user &rArr; eeconfig_update_user &rArr; eeprom_update_dword &rArr; eeprom_read_dword &rArr; eeprom_read_block &rArr; clamp_length
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeconfig_update_kb
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeconfig_init_user
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeconfig_init_quantum
</UL>

<P><STRONG><a name="[158]"></a>eeconfig_init_quantum</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, eeconfig.o(.text.eeconfig_init_quantum))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = eeconfig_init_quantum &rArr; eeconfig_init_kb &rArr; eeconfig_init_user &rArr; eeconfig_update_user &rArr; eeprom_update_dword &rArr; eeprom_read_dword &rArr; eeprom_read_block &rArr; clamp_length
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_update_block
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_update_byte
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_update_word
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_driver_erase
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeconfig_init_kb
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_update_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeconfig_init
</UL>

<P><STRONG><a name="[15b]"></a>eeconfig_init_user</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, eeconfig.o(.text.eeconfig_init_user))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = eeconfig_init_user &rArr; eeconfig_update_user &rArr; eeprom_update_dword &rArr; eeprom_read_dword &rArr; eeprom_read_block &rArr; clamp_length
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeconfig_update_user
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeconfig_init_kb
</UL>

<P><STRONG><a name="[160]"></a>eeconfig_is_enabled</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, eeconfig.o(.text.eeconfig_is_enabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = eeconfig_is_enabled &rArr; eeprom_read_word &rArr; eeprom_read_block &rArr; clamp_length
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_word
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;magic
</UL>

<P><STRONG><a name="[162]"></a>eeconfig_read_debug</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, eeconfig.o(.text.eeconfig_read_debug))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = eeconfig_read_debug &rArr; eeprom_read_byte &rArr; eeprom_read_block &rArr; clamp_length
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;magic
</UL>

<P><STRONG><a name="[164]"></a>eeconfig_read_default_layer</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, eeconfig.o(.text.eeconfig_read_default_layer))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = eeconfig_read_default_layer &rArr; eeprom_read_byte &rArr; eeprom_read_block &rArr; clamp_length
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;magic
</UL>

<P><STRONG><a name="[165]"></a>eeconfig_read_keymap</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, eeconfig.o(.text.eeconfig_read_keymap))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = eeconfig_read_keymap &rArr; eeprom_read_word &rArr; eeprom_read_block &rArr; clamp_length
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_word
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_magic
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;magic
</UL>

<P><STRONG><a name="[166]"></a>eeconfig_update_handedness</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, eeconfig.o(.text.eeconfig_update_handedness))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = eeconfig_update_handedness &rArr; eeprom_update_byte &rArr; eeprom_read_byte &rArr; eeprom_read_block &rArr; clamp_length
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_update_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_magic
</UL>

<P><STRONG><a name="[15a]"></a>eeconfig_update_kb</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, eeconfig.o(.text.eeconfig_update_kb))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = eeconfig_update_kb &rArr; eeprom_update_dword &rArr; eeprom_read_dword &rArr; eeprom_read_block &rArr; clamp_length
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_update_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeconfig_init_kb
</UL>

<P><STRONG><a name="[167]"></a>eeconfig_update_keymap</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, eeconfig.o(.text.eeconfig_update_keymap))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = eeconfig_update_keymap &rArr; eeprom_update_word &rArr; eeprom_read_word &rArr; eeprom_read_block &rArr; clamp_length
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_update_word
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_magic
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oneshot_set
</UL>

<P><STRONG><a name="[15f]"></a>eeconfig_update_user</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, eeconfig.o(.text.eeconfig_update_user))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = eeconfig_update_user &rArr; eeprom_update_dword &rArr; eeprom_read_dword &rArr; eeprom_read_block &rArr; clamp_length
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_update_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeconfig_init_user
</UL>

<P><STRONG><a name="[155]"></a>eeprom_driver_erase</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, eeprom_transient.o(.text.eeprom_driver_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = eeprom_driver_erase
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeconfig_disable
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_driver_init
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeconfig_init_quantum
</UL>

<P><STRONG><a name="[169]"></a>eeprom_driver_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, eeprom_transient.o(.text.eeprom_driver_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = eeprom_driver_init &rArr; eeprom_driver_erase
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_driver_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_setup
</UL>

<P><STRONG><a name="[16a]"></a>eeprom_read_block</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, eeprom_transient.o(.text.eeprom_read_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = eeprom_read_block &rArr; clamp_length
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clamp_length
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_dword
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_byte
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_word
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_update_block
</UL>

<P><STRONG><a name="[163]"></a>eeprom_read_byte</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, eeprom_driver.o(.text.eeprom_read_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = eeprom_read_byte &rArr; eeprom_read_block &rArr; clamp_length
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_block
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeconfig_read_default_layer
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeconfig_read_debug
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_update_byte
</UL>

<P><STRONG><a name="[16c]"></a>eeprom_read_dword</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, eeprom_driver.o(.text.eeprom_read_dword))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = eeprom_read_dword &rArr; eeprom_read_block &rArr; clamp_length
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_block
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_update_dword
</UL>

<P><STRONG><a name="[161]"></a>eeprom_read_word</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, eeprom_driver.o(.text.eeprom_read_word))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = eeprom_read_word &rArr; eeprom_read_block &rArr; clamp_length
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_block
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeconfig_read_keymap
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeconfig_is_enabled
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_update_word
</UL>

<P><STRONG><a name="[15e]"></a>eeprom_update_block</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, eeprom_driver.o(.text.eeprom_update_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = eeprom_update_block &rArr; eeprom_write_block &rArr; clamp_length
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_block
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_block
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeconfig_init_quantum
</UL>

<P><STRONG><a name="[15c]"></a>eeprom_update_byte</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, eeprom_driver.o(.text.eeprom_update_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = eeprom_update_byte &rArr; eeprom_read_byte &rArr; eeprom_read_block &rArr; clamp_length
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_byte
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeconfig_update_handedness
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeconfig_init_quantum
</UL>

<P><STRONG><a name="[15d]"></a>eeprom_update_dword</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, eeprom_driver.o(.text.eeprom_update_dword))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = eeprom_update_dword &rArr; eeprom_read_dword &rArr; eeprom_read_block &rArr; clamp_length
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_dword
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeconfig_init_quantum
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeconfig_update_kb
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeconfig_update_user
</UL>

<P><STRONG><a name="[156]"></a>eeprom_update_word</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, eeprom_driver.o(.text.eeprom_update_word))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = eeprom_update_word &rArr; eeprom_read_word &rArr; eeprom_read_block &rArr; clamp_length
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_word
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_word
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeconfig_disable
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeconfig_update_keymap
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeconfig_init_quantum
</UL>

<P><STRONG><a name="[16d]"></a>eeprom_write_block</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, eeprom_transient.o(.text.eeprom_write_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = eeprom_write_block &rArr; clamp_length
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clamp_length
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_update_block
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_dword
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_word
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_byte
</UL>

<P><STRONG><a name="[16e]"></a>eeprom_write_byte</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, eeprom_driver.o(.text.eeprom_write_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = eeprom_write_byte &rArr; eeprom_write_block &rArr; clamp_length
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_block
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_update_byte
</UL>

<P><STRONG><a name="[16f]"></a>eeprom_write_dword</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, eeprom_driver.o(.text.eeprom_write_dword))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = eeprom_write_dword &rArr; eeprom_write_block &rArr; clamp_length
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_block
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_update_dword
</UL>

<P><STRONG><a name="[170]"></a>eeprom_write_word</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, eeprom_driver.o(.text.eeprom_write_word))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = eeprom_write_word &rArr; eeprom_write_block &rArr; clamp_length
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_block
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_update_word
</UL>

<P><STRONG><a name="[18f]"></a>es_test_printf</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, hal_lld.o(.text.es_test_printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = es_test_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_lld_set_address
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_lld_clear_out
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_lld_clear_in
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_lld_get_status_out
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_lld_get_status_in
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_lld_read_setup
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_lld_stall_in
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_lld_stall_out
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_lld_start_in
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_lld_start_out
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_lld_disable_endpoints
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_lld_init_endpoint
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_lld_stop
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_lld_start
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_lld_init
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_lld_init
</UL>

<P><STRONG><a name="[7a]"></a>es_usb_ep_out_data_avail</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, hal_usb_lld.o(.text.es_usb_ep_out_data_avail))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = es_usb_ep_out_data_avail &rArr; ald_usb_ep_data_avail
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ald_usb_ep_data_avail
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VectorBC
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_ep0
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_read_packet
</UL>

<P><STRONG><a name="[296]"></a>ffffff</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, hal_lld.o(.text.ffffff))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ffffff
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
</UL>

<P><STRONG><a name="[174]"></a>get_event_keycode</STRONG> (Thumb, 172 bytes, Stack size 64 bytes, quantum.o(.text.get_event_keycode))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = get_event_keycode &rArr; layer_switch_get_layer &rArr; action_for_key &rArr; action_for_keycode &rArr; keycode_config
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keymap_key_to_keycode
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_source_layers_cache
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_source_layers_cache
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layer_switch_get_layer
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_record_keycode
</UL>

<P><STRONG><a name="[26e]"></a>get_mods</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, action_util.o(.text.get_mods))
<BR><BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_grave_esc
</UL>

<P><STRONG><a name="[135]"></a>get_oneshot_layer</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, action_util.o(.text.get_oneshot_layer))
<BR><BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_oneshot_layer
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_action
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_oneshot_layer_state
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_oneshot_layer
</UL>

<P><STRONG><a name="[134]"></a>get_oneshot_layer_state</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, action_util.o(.text.get_oneshot_layer_state))
<BR><BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_action
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_oneshot_layer_state
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_oneshot_layer_active
</UL>

<P><STRONG><a name="[17a]"></a>get_record_keycode</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, quantum.o(.text.get_record_keycode))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = get_record_keycode &rArr; get_event_keycode &rArr; layer_switch_get_layer &rArr; action_for_key &rArr; action_for_keycode &rArr; keycode_config
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_event_keycode
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_record_quantum
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_process_record_quantum
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_process_record_quantum
</UL>

<P><STRONG><a name="[2bb]"></a>get_usb_descriptor</STRONG> (Thumb, 356 bytes, Stack size 48 bytes, usb_descriptor.o(.text.get_usb_descriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = get_usb_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_get_descriptor_cb
</UL>

<P><STRONG><a name="[17d]"></a>gpio_config</STRONG> (Thumb, 72 bytes, Stack size 48 bytes, hal_lld.o(.text.gpio_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = gpio_config &rArr; md_gpio_init &rArr; md_gpio_set_pin_mode
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_lld_init
</UL>

<P><STRONG><a name="[17f]"></a>halInit</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, hal.o(.text.halInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = halInit &rArr; hal_lld_init &rArr; md_rcu_sys_init &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stInit
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boardInit
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbInit
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmInit
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pal_lld_init
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_lld_init
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_setup
</UL>

<P><STRONG><a name="[181]"></a>hal_lld_init</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, hal_lld.o(.text.hal_lld_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = hal_lld_init &rArr; md_rcu_sys_init &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_uart_init
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_rcu_sys_init
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_rcu_pll0_init
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_config
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_test_printf
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_rcu_enable_usb
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_rcu_enable_uart1
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_rcu_enable_gpiod
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_rcu_enable_gpioc
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_rcu_enable_gpiob
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_rcu_enable_gpioa
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halInit
</UL>

<P><STRONG><a name="[75]"></a>handle_ep0</STRONG> (Thumb, 544 bytes, Stack size 48 bytes, hal_usb_lld.o(.text.handle_ep0))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = handle_ep0 &rArr; _usb_ep0in &rArr; usbStartTransmitI &rArr; usb_lld_start_in &rArr; usbd_ep_start_write &rArr; usbd_write_packet &rArr; usb_ep_in_data_avail &rArr; es_usbd_ep_tx_ready_state
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_usb_ep0out
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_usb_ep0in
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_usb_ep0setup
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_start_write
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_read_packet
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_usb_ep_out_data_avail
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VectorBC
</UL>

<P><STRONG><a name="[179]"></a>has_anykey</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, report.o(.text.has_anykey))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = has_anykey
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_mods_for_report
</UL>

<P><STRONG><a name="[1d1]"></a>host_keyboard_leds</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, host.o(.text.host_keyboard_leds))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = host_keyboard_leds
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_action
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_task
</UL>

<P><STRONG><a name="[299]"></a>host_keyboard_send</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, host.o(.text.host_keyboard_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = host_keyboard_send
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_6kro_report
</UL>

<P><STRONG><a name="[281]"></a>host_set_driver</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, host.o(.text.host_set_driver))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = host_set_driver
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_post_init
</UL>

<P><STRONG><a name="[192]"></a>housekeeping_task</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, keyboard.o(.text.housekeeping_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = housekeeping_task
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;housekeeping_task_user
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;housekeeping_task_kb
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[193]"></a>housekeeping_task_kb</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keyboard.o(.text.housekeeping_task_kb))
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;housekeeping_task
</UL>

<P><STRONG><a name="[194]"></a>housekeeping_task_user</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keyboard.o(.text.housekeeping_task_user))
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;housekeeping_task
</UL>

<P><STRONG><a name="[291]"></a>ibqGetEmptyBufferI</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, hal_buffers.o(.text.ibqGetEmptyBufferI))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ibqGetEmptyBufferI
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmkusb_start_receive
</UL>

<P><STRONG><a name="[196]"></a>ibqGetFullBufferTimeoutS</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, hal_buffers.o(.text.ibqGetFullBufferTimeoutS))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = ibqGetFullBufferTimeoutS &rArr; osalThreadEnqueueTimeoutS &rArr; chThdEnqueueTimeoutS &rArr; chSchGoSleepTimeoutS &rArr; chVTDoSetI &rArr; vt_enqueue &rArr; ch_dlist_insert &rArr; ch_dlist_insert_before
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalThreadEnqueueTimeoutS
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ibqReadTimeout
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ibqGetTimeout
</UL>

<P><STRONG><a name="[96]"></a>ibqGetTimeout</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, hal_buffers.o(.text.ibqGetTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = ibqGetTimeout &rArr; ibqGetFullBufferTimeoutS &rArr; osalThreadEnqueueTimeoutS &rArr; chThdEnqueueTimeoutS &rArr; chSchGoSleepTimeoutS &rArr; chVTDoSetI &rArr; vt_enqueue &rArr; ch_dlist_insert &rArr; ch_dlist_insert_before
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ibqReleaseEmptyBufferS
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ibqGetFullBufferTimeoutS
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalSysUnlock
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalSysLock
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gett
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get
</UL>

<P><STRONG><a name="[19b]"></a>ibqObjectInit</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, hal_buffers.o(.text.ibqObjectInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = ibqObjectInit &rArr; osalThreadQueueObjectInit &rArr; chThdQueueObjectInit &rArr; ch_queue_init
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalThreadQueueObjectInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmkusbObjectInit
</UL>

<P><STRONG><a name="[98]"></a>ibqReadTimeout</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, hal_buffers.o(.text.ibqReadTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = ibqReadTimeout &rArr; ibqGetFullBufferTimeoutS &rArr; osalThreadEnqueueTimeoutS &rArr; chThdEnqueueTimeoutS &rArr; chSchGoSleepTimeoutS &rArr; chVTDoSetI &rArr; vt_enqueue &rArr; ch_dlist_insert &rArr; ch_dlist_insert_before
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ibqReleaseEmptyBufferS
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ibqGetFullBufferTimeoutS
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalSysUnlock
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalSysLock
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_readt
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_read
</UL>

<P><STRONG><a name="[19a]"></a>ibqReleaseEmptyBufferS</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, hal_buffers.o(.text.ibqReleaseEmptyBufferS))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ibqReleaseEmptyBufferS
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ibqReadTimeout
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ibqGetTimeout
</UL>

<P><STRONG><a name="[19d]"></a>ibqResetI</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, hal_buffers.o(.text.ibqResetI))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ibqResetI &rArr; osalThreadDequeueAllI &rArr; chThdDequeueAllI &rArr; chThdDoDequeueNextI &rArr; chSchReadyI &rArr; __sch_ready_behind &rArr; ch_pqueue_insert_behind
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalThreadDequeueAllI
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmkusbConfigureHookI
</UL>

<P><STRONG><a name="[19f]"></a>init_usb_driver</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, usb_main.o(.text.init_usb_driver))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = init_usb_driver &rArr; chThdSleep &rArr; chThdSleepS &rArr; chSchGoSleepTimeoutS &rArr; chVTDoSetI &rArr; vt_enqueue &rArr; ch_dlist_insert &rArr; ch_dlist_insert_before
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbStop
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbStart
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdSleep
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ald_usb_dev_disconnect
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ald_usb_dev_connect
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chVTObjectInit
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmkusbStart
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmkusbObjectInit
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_pre_init
</UL>

<P><STRONG><a name="[293]"></a>is_key_pressed</STRONG> (Thumb, 92 bytes, Stack size 12 bytes, report.o(.text.is_key_pressed))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = is_key_pressed
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_code
</UL>

<P><STRONG><a name="[29c]"></a>is_keyboard_master</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, keyboard.o(.text.is_keyboard_master))
<BR><BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;should_process_keypress
</UL>

<P><STRONG><a name="[1a7]"></a>is_oneshot_layer_active</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, action_util.o(.text.is_oneshot_layer_active))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = is_oneshot_layer_active
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_oneshot_layer_state
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_action
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_record
</UL>

<P><STRONG><a name="[1aa]"></a>is_tap_action</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, action.o(.text.is_tap_action))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = is_tap_action
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_tap_record
</UL>

<P><STRONG><a name="[1a8]"></a>is_tap_record</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, action.o(.text.is_tap_record))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = is_tap_record &rArr; layer_switch_get_action &rArr; layer_switch_get_layer &rArr; action_for_key &rArr; action_for_keycode &rArr; keycode_config
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IS_NOEVENT
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layer_switch_get_action
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_tap_action
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_tapping
</UL>

<P><STRONG><a name="[1ae]"></a>keyboard_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, keyboard.o(.text.keyboard_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = keyboard_init &rArr; quantum_init &rArr; magic &rArr; eeconfig_init &rArr; eeconfig_init_quantum &rArr; eeconfig_init_kb &rArr; eeconfig_init_user &rArr; eeconfig_update_user &rArr; eeprom_update_dword &rArr; eeprom_read_dword &rArr; eeprom_read_block &rArr; clamp_length
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_init
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quantum_init
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_post_init_kb
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_init
</UL>

<P><STRONG><a name="[4c]"></a>keyboard_leds</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usb_main.o(.text.keyboard_leds))
<BR>[Address Reference Count : 1]<UL><LI> chibios.o(.data.chibios_driver)
</UL>
<P><STRONG><a name="[1b2]"></a>keyboard_post_init_kb</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, keyboard.o(.text.keyboard_post_init_kb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = keyboard_post_init_kb
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_post_init_user
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_init
</UL>

<P><STRONG><a name="[1b3]"></a>keyboard_post_init_user</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keyboard.o(.text.keyboard_post_init_user))
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_post_init_kb
</UL>

<P><STRONG><a name="[1b4]"></a>keyboard_pre_init_kb</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, keyboard.o(.text.keyboard_pre_init_kb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = keyboard_pre_init_kb
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_pre_init_user
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_setup
</UL>

<P><STRONG><a name="[1b5]"></a>keyboard_pre_init_user</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keyboard.o(.text.keyboard_pre_init_user))
<BR><BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_pre_init_kb
</UL>

<P><STRONG><a name="[1b6]"></a>keyboard_setup</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, keyboard.o(.text.keyboard_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = keyboard_setup &rArr; eeprom_driver_init &rArr; eeprom_driver_erase
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_driver_init
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_set_sendchar
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_pre_init_kb
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_setup
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b9]"></a>keyboard_task</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, keyboard.o(.text.keyboard_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 844<LI>Call Chain = keyboard_task &rArr; matrix_task &rArr; generate_tick_event &rArr; action_exec &rArr; action_tapping_process &rArr; process_tapping &rArr; waiting_buffer_scan_tap &rArr; process_record &rArr; process_record_handler &rArr; process_action &rArr;  process_record (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quantum_task
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;last_matrix_activity_trigger
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_task
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_task
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_task
</UL>

<P><STRONG><a name="[1be]"></a>keycode_at_keymap_location</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, keymap_introspection.o(.text.keycode_at_keymap_location))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = keycode_at_keymap_location &rArr; keycode_at_keymap_location_raw
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keycode_at_keymap_location_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keymap_key_to_keycode
</UL>

<P><STRONG><a name="[1bf]"></a>keycode_at_keymap_location_raw</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, keymap_introspection.o(.text.keycode_at_keymap_location_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = keycode_at_keymap_location_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keycode_at_keymap_location
</UL>

<P><STRONG><a name="[ae]"></a>keycode_config</STRONG> (Thumb, 708 bytes, Stack size 12 bytes, keycode_config.o(.text.keycode_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = keycode_config
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_for_keycode
</UL>

<P><STRONG><a name="[ac]"></a>keymap_key_to_keycode</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, keymap_common.o(.text.keymap_key_to_keycode))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = keymap_key_to_keycode &rArr; keycode_at_keymap_location &rArr; keycode_at_keymap_location_raw
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keycode_at_keymap_location
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_for_key
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_event_keycode
</UL>

<P><STRONG><a name="[1bb]"></a>last_matrix_activity_trigger</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, keyboard.o(.text.last_matrix_activity_trigger))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = last_matrix_activity_trigger &rArr; timer_read32 &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_read32
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_task
</UL>

<P><STRONG><a name="[1c1]"></a>layer_and</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, action_layer.o(.text.layer_and))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = layer_and &rArr; layer_state_set &rArr; layer_state_set_kb &rArr; layer_state_set_user
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layer_state_set
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_action
</UL>

<P><STRONG><a name="[1c3]"></a>layer_clear</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, action_layer.o(.text.layer_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = layer_clear &rArr; layer_state_set &rArr; layer_state_set_kb &rArr; layer_state_set_user
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layer_state_set
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_action
</UL>

<P><STRONG><a name="[1c9]"></a>layer_debug</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, action_layer.o(.text.layer_debug))
<BR><BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_record_handler
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layer_state_set
</UL>

<P><STRONG><a name="[1c4]"></a>layer_invert</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, action_layer.o(.text.layer_invert))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = layer_invert &rArr; layer_state_set &rArr; layer_state_set_kb &rArr; layer_state_set_user
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layer_state_set
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_action
</UL>

<P><STRONG><a name="[1c5]"></a>layer_move</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, action_layer.o(.text.layer_move))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = layer_move &rArr; layer_state_set &rArr; layer_state_set_kb &rArr; layer_state_set_user
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layer_state_set
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_action
</UL>

<P><STRONG><a name="[136]"></a>layer_off</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, action_layer.o(.text.layer_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = layer_off &rArr; layer_state_set &rArr; layer_state_set_kb &rArr; layer_state_set_user
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layer_state_set
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_action
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_oneshot_layer_state
</UL>

<P><STRONG><a name="[1c6]"></a>layer_on</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, action_layer.o(.text.layer_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = layer_on &rArr; layer_state_set &rArr; layer_state_set_kb &rArr; layer_state_set_user
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layer_state_set
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_oneshot_layer
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_action
</UL>

<P><STRONG><a name="[1c7]"></a>layer_or</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, action_layer.o(.text.layer_or))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = layer_or &rArr; layer_state_set &rArr; layer_state_set_kb &rArr; layer_state_set_user
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layer_state_set
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_action
</UL>

<P><STRONG><a name="[1c2]"></a>layer_state_set</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, action_layer.o(.text.layer_state_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = layer_state_set &rArr; layer_state_set_kb &rArr; layer_state_set_user
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layer_debug
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layer_state_set_kb
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_action
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layer_xor
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layer_and
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layer_or
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layer_invert
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layer_off
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layer_on
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layer_move
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layer_clear
</UL>

<P><STRONG><a name="[1c8]"></a>layer_state_set_kb</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, action_layer.o(.text.layer_state_set_kb))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = layer_state_set_kb &rArr; layer_state_set_user
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layer_state_set_user
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layer_state_set
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;magic
</UL>

<P><STRONG><a name="[1ca]"></a>layer_state_set_user</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, action_layer.o(.text.layer_state_set_user))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = layer_state_set_user
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layer_state_set_kb
</UL>

<P><STRONG><a name="[1a9]"></a>layer_switch_get_action</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, action_layer.o(.text.layer_switch_get_action))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = layer_switch_get_action &rArr; layer_switch_get_layer &rArr; action_for_key &rArr; action_for_keycode &rArr; keycode_config
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_for_key
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layer_switch_get_layer
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_record_tap_hint
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_or_get_action
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_tapping
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_tap_record
</UL>

<P><STRONG><a name="[175]"></a>layer_switch_get_layer</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, action_layer.o(.text.layer_switch_get_layer))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = layer_switch_get_layer &rArr; action_for_key &rArr; action_for_keycode &rArr; keycode_config
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_for_key
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layer_switch_get_action
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_or_get_action
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_event_keycode
</UL>

<P><STRONG><a name="[1cb]"></a>layer_xor</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, action_layer.o(.text.layer_xor))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = layer_xor &rArr; layer_state_set &rArr; layer_state_set_kb &rArr; layer_state_set_user
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layer_state_set
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_action
</UL>

<P><STRONG><a name="[1cc]"></a>led_init_ports</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, led.o(.text.led_init_ports))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = led_init_ports &rArr; _pal_lld_setgroupmode
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pal_lld_setgroupmode
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quantum_init
</UL>

<P><STRONG><a name="[1ce]"></a>led_set</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, led.o(.text.led_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = led_set &rArr; led_update_kb &rArr; led_update_ports
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_update_kb
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_set_user
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_action
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_task
</UL>

<P><STRONG><a name="[1cf]"></a>led_set_user</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, led.o(.text.led_set_user))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = led_set_user
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_set
</UL>

<P><STRONG><a name="[1bd]"></a>led_task</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, led.o(.text.led_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = led_task &rArr; timer_read32 &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_set
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_keyboard_leds
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_read32
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_task
</UL>

<P><STRONG><a name="[1d0]"></a>led_update_kb</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, led.o(.text.led_update_kb))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = led_update_kb &rArr; led_update_ports
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_update_ports
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_update_user
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_set
</UL>

<P><STRONG><a name="[1d3]"></a>led_update_ports</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, led.o(.text.led_update_ports))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = led_update_ports
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_update_kb
</UL>

<P><STRONG><a name="[1d2]"></a>led_update_user</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, led.o(.text.led_update_user))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = led_update_user
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_update_kb
</UL>

<P><STRONG><a name="[1d4]"></a>magic</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, magic.o(.text.magic))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = magic &rArr; eeconfig_init &rArr; eeconfig_init_quantum &rArr; eeconfig_init_kb &rArr; eeconfig_init_user &rArr; eeconfig_update_user &rArr; eeprom_update_dword &rArr; eeprom_read_dword &rArr; eeprom_read_block &rArr; clamp_length
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layer_state_set_kb
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_layer_set
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootmagic
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeconfig_read_keymap
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeconfig_read_default_layer
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeconfig_read_debug
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeconfig_is_enabled
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeconfig_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quantum_init
</UL>

<P><STRONG><a name="[2f]"></a>main</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 868<LI>Call Chain = main &rArr; protocol_task &rArr; keyboard_task &rArr; matrix_task &rArr; generate_tick_event &rArr; action_exec &rArr; action_tapping_process &rArr; process_tapping &rArr; waiting_buffer_scan_tap &rArr; process_record &rArr; process_record_handler &rArr; process_action &rArr;  process_record (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_setup
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_setup
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_task
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_init
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;housekeeping_task
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_setup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[1ea]"></a>matrix_can_read</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, keyboard.o(.text.matrix_can_read))
<BR><BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_task
</UL>

<P><STRONG><a name="[1eb]"></a>matrix_get_row</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, matrix_common.o(.text.matrix_get_row))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = matrix_get_row
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suspend_wakeup_condition
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_task
</UL>

<P><STRONG><a name="[1b0]"></a>matrix_init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, matrix.o(.text.matrix_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = matrix_init &rArr; matrix_init_pins &rArr; unselect_rows &rArr; unselect_row &rArr; setPinInputHigh_atomic &rArr; __interrupt_enable__ &rArr; chSysUnlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_init_kb
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debounce_init
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_init_pins
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_init
</UL>

<P><STRONG><a name="[1dc]"></a>matrix_init_kb</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, matrix_common.o(.text.matrix_init_kb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = matrix_init_kb
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_init_user
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_init
</UL>

<P><STRONG><a name="[1da]"></a>matrix_init_pins</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, matrix.o(.text.matrix_init_pins))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = matrix_init_pins &rArr; unselect_rows &rArr; unselect_row &rArr; setPinInputHigh_atomic &rArr; __interrupt_enable__ &rArr; chSysUnlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPinInputHigh_atomic
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unselect_rows
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_init
</UL>

<P><STRONG><a name="[1dd]"></a>matrix_init_user</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, matrix_common.o(.text.matrix_init_user))
<BR><BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_init_kb
</UL>

<P><STRONG><a name="[1e0]"></a>matrix_io_delay</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, matrix_common.o(.text.matrix_io_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = matrix_io_delay &rArr; chThdSleep &rArr; chThdSleepS &rArr; chSchGoSleepTimeoutS &rArr; chVTDoSetI &rArr; vt_enqueue &rArr; ch_dlist_insert &rArr; ch_dlist_insert_before
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdSleep
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_output_unselect_delay
</UL>

<P><STRONG><a name="[1e4]"></a>matrix_output_select_delay</STRONG> (Thumb, 514 bytes, Stack size 16 bytes, matrix_common.o(.text.matrix_output_select_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = matrix_output_select_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_read_cols_on_row
</UL>

<P><STRONG><a name="[1e1]"></a>matrix_output_unselect_delay</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, matrix_common.o(.text.matrix_output_unselect_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = matrix_output_unselect_delay &rArr; matrix_io_delay &rArr; chThdSleep &rArr; chThdSleepS &rArr; chSchGoSleepTimeoutS &rArr; chVTDoSetI &rArr; vt_enqueue &rArr; ch_dlist_insert &rArr; ch_dlist_insert_before
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_io_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_read_cols_on_row
</UL>

<P><STRONG><a name="[2a2]"></a>matrix_power_down</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, suspend.o(.text.matrix_power_down))
<BR><BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suspend_wakeup_condition
</UL>

<P><STRONG><a name="[2a1]"></a>matrix_power_up</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, suspend.o(.text.matrix_power_up))
<BR><BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suspend_wakeup_condition
</UL>

<P><STRONG><a name="[1ec]"></a>matrix_print</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, matrix_common.o(.text.matrix_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = matrix_print
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_task
</UL>

<P><STRONG><a name="[1e2]"></a>matrix_read_cols_on_row</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, matrix.o(.text.matrix_read_cols_on_row))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = matrix_read_cols_on_row &rArr; matrix_output_unselect_delay &rArr; matrix_io_delay &rArr; chThdSleep &rArr; chThdSleepS &rArr; chSchGoSleepTimeoutS &rArr; chVTDoSetI &rArr; vt_enqueue &rArr; ch_dlist_insert &rArr; ch_dlist_insert_before
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_output_unselect_delay
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_output_select_delay
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readMatrixPin
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_row
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unselect_row
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_scan
</UL>

<P><STRONG><a name="[1e7]"></a>matrix_scan</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, matrix.o(.text.matrix_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = matrix_scan &rArr; matrix_read_cols_on_row &rArr; matrix_output_unselect_delay &rArr; matrix_io_delay &rArr; chThdSleep &rArr; chThdSleepS &rArr; chSchGoSleepTimeoutS &rArr; chVTDoSetI &rArr; vt_enqueue &rArr; ch_dlist_insert &rArr; ch_dlist_insert_before
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_scan_kb
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debounce
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_read_cols_on_row
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suspend_wakeup_condition
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_task
</UL>

<P><STRONG><a name="[1e8]"></a>matrix_scan_kb</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, matrix_common.o(.text.matrix_scan_kb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = matrix_scan_kb
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_scan_user
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_scan
</UL>

<P><STRONG><a name="[1e9]"></a>matrix_scan_user</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, matrix_common.o(.text.matrix_scan_user))
<BR><BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_scan_kb
</UL>

<P><STRONG><a name="[1b8]"></a>matrix_setup</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keyboard.o(.text.matrix_setup))
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_setup
</UL>

<P><STRONG><a name="[29f]"></a>mcu_reset</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, custom.o(.text.mcu_reset))
<BR><BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_reset_keyboard
</UL>

<P><STRONG><a name="[72]"></a>md_delay_1us</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, md_utils.o(.text.md_delay_1us))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = md_delay_1us &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VectorBC
</UL>

<P><STRONG><a name="[17e]"></a>md_gpio_init</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, md_gpio.o(.text.md_gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = md_gpio_init &rArr; md_gpio_set_pin_mode
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_gpio_set_pin_mode
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_gpio_set_pin_outputdriving
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_gpio_set_pin_pull
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_gpio_set_pin_output_type
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_gpio_set_pin_function8_15
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_gpio_set_pin_function0_7
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_config
</UL>

<P><STRONG><a name="[1f7]"></a>md_rcu_check_hosc_ready</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, md_rcu.o(.text.md_rcu_check_hosc_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = md_rcu_check_hosc_ready &rArr; md_tick_waitms_rcu &rArr; md_tick_set_cvr_current
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_tick_waitms_rcu
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_tick_init_rcu
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_rcu_enable_hosc
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_rcu_disable_hosc
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_rcu_is_active_flag_hosc_ready
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_rcu_sys_init
</UL>

<P><STRONG><a name="[186]"></a>md_rcu_pll0_init</STRONG> (Thumb, 336 bytes, Stack size 48 bytes, md_rcu.o(.text.md_rcu_pll0_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = md_rcu_pll0_init &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_rcu_set_pll0_fk
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_rcu_set_pll0_fn
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_rcu_set_pll0_fm
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_rcu_set_pll_prediv
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_rcu_set_pll_source
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_rcu_get_pll0_fm
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_rcu_is_active_flag_pll0_ready
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_rcu_disable_pll0
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_rcu_enable_pll0
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_lld_init
</UL>

<P><STRONG><a name="[187]"></a>md_rcu_sys_init</STRONG> (Thumb, 1004 bytes, Stack size 80 bytes, md_rcu.o(.text.md_rcu_sys_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = md_rcu_sys_init &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_rcu_check_hosc_ready
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_rcu_set_current_system_frequency
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_rcu_disable_hosc_css
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_rcu_enable_hosc_css
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_rcu_get_pclk_div
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_rcu_get_hclk_div
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_rcu_get_current_system_clock
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_rcu_get_pll0_fm
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_rcu_get_pll0_fk
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_rcu_get_pll0_fn
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_rcu_get_pll_prediv
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_rcu_set_system_clock_source
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_rcu_set_hclk_div
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_rcu_set_pclk_div
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_rcu_set_mco_source
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_rcu_set_mco_div
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_rcu_is_active_flag_losc_ready
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_rcu_is_active_flag_lrc_ready
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_rcu_is_active_flag_hrc_ready
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_rcu_is_active_flag_hrc48_ready
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_rcu_is_active_flag_pll0_ready
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_rcu_disable_lrc
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_rcu_enable_lrc
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_rcu_disable_losc
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_rcu_enable_losc
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_rcu_disable_hrc
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_rcu_enable_hrc
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_rcu_disable_hrc48
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_rcu_enable_hrc48
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_rcu_disable_pll0
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_rcu_enable_pll0
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_fc_set_read_latency
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_rcu_enable_hosc
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_rcu_disable_hosc
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_rcu_is_active_flag_hosc_ready
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_lld_init
</UL>

<P><STRONG><a name="[1f8]"></a>md_tick_init_rcu</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, md_rcu.o(.text.md_tick_init_rcu))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = md_tick_init_rcu &rArr; md_tick_set_csr_clksrc
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_tick_enable_csr_enable
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_tick_set_csr_clksrc
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_tick_set_cvr_current
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_tick_set_rvr_reload
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_rcu_check_hosc_ready
</UL>

<P><STRONG><a name="[1f9]"></a>md_tick_waitms_rcu</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, md_rcu.o(.text.md_tick_waitms_rcu))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = md_tick_waitms_rcu &rArr; md_tick_set_cvr_current
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_tick_get_cvr_current
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_tick_set_cvr_current
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_rcu_check_hosc_ready
</UL>

<P><STRONG><a name="[18e]"></a>md_uart_init</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, md_uart.o(.text.md_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = md_uart_init &rArr; md_uart_setting_baudrate &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_uart_setting_baudrate
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_uart_enable_rx
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_uart_enable_tx
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_uart_set_parity
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_uart_set_datawidth
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_uart_set_stop
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_uart_set_bitorder_lsb
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_uart_set_bitorder_msb
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_uart_disable_rx
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_uart_disable_tx
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_lld_init
</UL>

<P><STRONG><a name="[228]"></a>md_uart_setting_baudrate</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, md_uart.o(.text.md_uart_setting_baudrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = md_uart_setting_baudrate &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_uart_set_baudrate
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_uart_init
</UL>

<P><STRONG><a name="[af]"></a>mod_config</STRONG> (Thumb, 296 bytes, Stack size 4 bytes, keycode_config.o(.text.mod_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = mod_config
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_for_keycode
</UL>

<P><STRONG><a name="[232]"></a>notify_usb_device_state_change_kb</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, usb_device_state.o(.text.notify_usb_device_state_change_kb))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = notify_usb_device_state_change_kb &rArr; notify_usb_device_state_change_user
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notify_usb_device_state_change_user
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notify_usb_device_state_change
</UL>

<P><STRONG><a name="[233]"></a>notify_usb_device_state_change_user</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, usb_device_state.o(.text.notify_usb_device_state_change_user))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = notify_usb_device_state_change_user
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notify_usb_device_state_change_kb
</UL>

<P><STRONG><a name="[235]"></a>obqGetEmptyBufferTimeoutS</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, hal_buffers.o(.text.obqGetEmptyBufferTimeoutS))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = obqGetEmptyBufferTimeoutS &rArr; osalThreadEnqueueTimeoutS &rArr; chThdEnqueueTimeoutS &rArr; chSchGoSleepTimeoutS &rArr; chVTDoSetI &rArr; vt_enqueue &rArr; ch_dlist_insert &rArr; ch_dlist_insert_before
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalThreadEnqueueTimeoutS
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obqWriteTimeout
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obqPutTimeout
</UL>

<P><STRONG><a name="[234]"></a>obqGetFullBufferI</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, hal_buffers.o(.text.obqGetFullBufferI))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = obqGetFullBufferI
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmkusbSOFHookI
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obnotify
</UL>

<P><STRONG><a name="[236]"></a>obqObjectInit</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, hal_buffers.o(.text.obqObjectInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = obqObjectInit &rArr; osalThreadQueueObjectInit &rArr; chThdQueueObjectInit &rArr; ch_queue_init
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalThreadQueueObjectInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmkusbObjectInit
</UL>

<P><STRONG><a name="[237]"></a>obqPostFullBufferS</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, hal_buffers.o(.text.obqPostFullBufferS))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = obqPostFullBufferS
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obqWriteTimeout
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obqPutTimeout
</UL>

<P><STRONG><a name="[97]"></a>obqPutTimeout</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, hal_buffers.o(.text.obqPutTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = obqPutTimeout &rArr; obqGetEmptyBufferTimeoutS &rArr; osalThreadEnqueueTimeoutS &rArr; chThdEnqueueTimeoutS &rArr; chSchGoSleepTimeoutS &rArr; chVTDoSetI &rArr; vt_enqueue &rArr; ch_dlist_insert &rArr; ch_dlist_insert_before
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obqPostFullBufferS
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obqGetEmptyBufferTimeoutS
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalSysUnlock
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalSysLock
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_putt
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_put
</UL>

<P><STRONG><a name="[238]"></a>obqResetI</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, hal_buffers.o(.text.obqResetI))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = obqResetI &rArr; osalThreadDequeueAllI &rArr; chThdDequeueAllI &rArr; chThdDoDequeueNextI &rArr; chSchReadyI &rArr; __sch_ready_behind &rArr; ch_pqueue_insert_behind
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalThreadDequeueAllI
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmkusbConfigureHookI
</UL>

<P><STRONG><a name="[28e]"></a>obqTryFlushI</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, hal_buffers.o(.text.obqTryFlushI))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = obqTryFlushI
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmkusbSOFHookI
</UL>

<P><STRONG><a name="[a3]"></a>obqWriteTimeout</STRONG> (Thumb, 238 bytes, Stack size 40 bytes, hal_buffers.o(.text.obqWriteTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = obqWriteTimeout &rArr; obqGetEmptyBufferTimeoutS &rArr; osalThreadEnqueueTimeoutS &rArr; chThdEnqueueTimeoutS &rArr; chSchGoSleepTimeoutS &rArr; chVTDoSetI &rArr; vt_enqueue &rArr; ch_dlist_insert &rArr; ch_dlist_insert_before
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obqPostFullBufferS
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obqGetEmptyBufferTimeoutS
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalSysUnlock
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalSysLock
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writet
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write
</UL>

<P><STRONG><a name="[239]"></a>oneshot_disable</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, action_util.o(.text.oneshot_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = oneshot_disable &rArr; oneshot_set &rArr; eeconfig_update_keymap &rArr; eeprom_update_word &rArr; eeprom_read_word &rArr; eeprom_read_block &rArr; clamp_length
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oneshot_set
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_record_quantum
</UL>

<P><STRONG><a name="[23b]"></a>oneshot_enable</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, action_util.o(.text.oneshot_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = oneshot_enable &rArr; oneshot_set &rArr; eeconfig_update_keymap &rArr; eeprom_update_word &rArr; eeprom_read_word &rArr; eeprom_read_block &rArr; clamp_length
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oneshot_set
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_record_quantum
</UL>

<P><STRONG><a name="[23c]"></a>oneshot_layer_changed_kb</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, action_util.o(.text.oneshot_layer_changed_kb))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = oneshot_layer_changed_kb &rArr; oneshot_layer_changed_user
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oneshot_layer_changed_user
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_oneshot_layer
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_oneshot_layer
</UL>

<P><STRONG><a name="[23d]"></a>oneshot_layer_changed_user</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, action_util.o(.text.oneshot_layer_changed_user))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = oneshot_layer_changed_user
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oneshot_layer_changed_kb
</UL>

<P><STRONG><a name="[152]"></a>oneshot_locked_mods_changed_kb</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, action_util.o(.text.oneshot_locked_mods_changed_kb))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = oneshot_locked_mods_changed_kb &rArr; oneshot_locked_mods_changed_user
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oneshot_locked_mods_changed_user
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_oneshot_locked_mods
</UL>

<P><STRONG><a name="[23e]"></a>oneshot_locked_mods_changed_user</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, action_util.o(.text.oneshot_locked_mods_changed_user))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = oneshot_locked_mods_changed_user
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oneshot_locked_mods_changed_kb
</UL>

<P><STRONG><a name="[ba]"></a>oneshot_mods_changed_kb</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, action_util.o(.text.oneshot_mods_changed_kb))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = oneshot_mods_changed_kb &rArr; oneshot_mods_changed_user
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oneshot_mods_changed_user
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_oneshot_mods
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_oneshot_mods
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_oneshot_mods
</UL>

<P><STRONG><a name="[23f]"></a>oneshot_mods_changed_user</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, action_util.o(.text.oneshot_mods_changed_user))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = oneshot_mods_changed_user
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oneshot_mods_changed_kb
</UL>

<P><STRONG><a name="[23a]"></a>oneshot_set</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, action_util.o(.text.oneshot_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = oneshot_set &rArr; eeconfig_update_keymap &rArr; eeprom_update_word &rArr; eeprom_read_word &rArr; eeprom_read_block &rArr; clamp_length
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_oneshot_layer_state
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeconfig_update_keymap
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oneshot_disable
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oneshot_enable
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oneshot_toggle
</UL>

<P><STRONG><a name="[240]"></a>oneshot_toggle</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, action_util.o(.text.oneshot_toggle))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = oneshot_toggle &rArr; oneshot_set &rArr; eeconfig_update_keymap &rArr; eeprom_update_word &rArr; eeprom_read_word &rArr; eeprom_read_block &rArr; clamp_length
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oneshot_set
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_record_quantum
</UL>

<P><STRONG><a name="[24e]"></a>perform_space_cadet</STRONG> (Thumb, 308 bytes, Stack size 40 bytes, process_space_cadet.o(.text.perform_space_cadet))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = perform_space_cadet &rArr; tap_code &rArr; tap_code_delay &rArr; chThdSleep &rArr; chThdSleepS &rArr; chSchGoSleepTimeoutS &rArr; chVTDoSetI &rArr; vt_enqueue &rArr; ch_dlist_insert &rArr; ch_dlist_insert_before
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unregister_mods
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_mods
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_elapsed
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_read
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tap_code
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_space_cadet
</UL>

<P><STRONG><a name="[1d6]"></a>platform_setup</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, platform.o(.text.platform_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = platform_setup &rArr; halInit &rArr; hal_lld_init &rArr; md_rcu_sys_init &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halInit
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSysInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cd]"></a>port_init</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, chcore.o(.text.port_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = port_init &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chInstanceObjectInit
</UL>

<P><STRONG><a name="[25e]"></a>post_process_record_kb</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, quantum.o(.text.post_process_record_kb))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = post_process_record_kb &rArr; post_process_record_user
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_process_record_user
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_process_record_quantum
</UL>

<P><STRONG><a name="[260]"></a>post_process_record_quantum</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, quantum.o(.text.post_process_record_quantum))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = post_process_record_quantum &rArr; get_record_keycode &rArr; get_event_keycode &rArr; layer_switch_get_layer &rArr; action_for_key &rArr; action_for_keycode &rArr; keycode_config
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_record_keycode
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_process_record_kb
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_record
</UL>

<P><STRONG><a name="[25f]"></a>post_process_record_user</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, quantum.o(.text.post_process_record_user))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = post_process_record_user
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_process_record_kb
</UL>

<P><STRONG><a name="[261]"></a>pre_process_record_kb</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, quantum.o(.text.pre_process_record_kb))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pre_process_record_kb &rArr; pre_process_record_user
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_process_record_user
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_process_record_quantum
</UL>

<P><STRONG><a name="[a9]"></a>pre_process_record_quantum</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, quantum.o(.text.pre_process_record_quantum))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = pre_process_record_quantum &rArr; get_record_keycode &rArr; get_event_keycode &rArr; layer_switch_get_layer &rArr; action_for_key &rArr; action_for_keycode &rArr; keycode_config
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_record_keycode
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_process_record_kb
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_exec
</UL>

<P><STRONG><a name="[262]"></a>pre_process_record_user</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, quantum.o(.text.pre_process_record_user))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pre_process_record_user
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_process_record_kb
</UL>

<P><STRONG><a name="[1b7]"></a>print_set_sendchar</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, print.o(.text.print_set_sendchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = print_set_sendchar
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_setup
</UL>

<P><STRONG><a name="[263]"></a>process_action</STRONG> (Thumb, 2080 bytes, Stack size 128 bytes, action.o(.text.process_action))
<BR><BR>[Stack]<UL><LI>Max Depth = 300 + In Cycle
<LI>Call Chain = process_action &rArr;  process_record (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdSleep
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_set
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_keyboard_leds
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_oneshot_layer
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_mouse
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_oneshot_locked_mods
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_oneshot_mods
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_oneshot_mods
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_weak_mods
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_mods
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_keyboard_report
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_weak_mods
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_mods
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_oneshot_layer_state
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_oneshot_layer_active
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_record
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layer_xor
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layer_and
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layer_or
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layer_invert
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layer_off
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layer_on
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layer_move
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layer_clear
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layer_state_set
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_layer_xor
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_layer_and
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_layer_or
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_layer_set
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unregister_mods
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unregister_code
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_mods
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_code
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_oneshot_layer
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_oneshot_layer_state
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_record_handler
</UL>

<P><STRONG><a name="[279]"></a>process_action_kb</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, quantum.o(.text.process_action_kb))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = process_action_kb
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_record_quantum
</UL>

<P><STRONG><a name="[26d]"></a>process_grave_esc</STRONG> (Thumb, 152 bytes, Stack size 48 bytes, process_grave_esc.o(.text.process_grave_esc))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = process_grave_esc &rArr; send_keyboard_report &rArr; send_6kro_report &rArr; get_mods_for_report &rArr; clear_oneshot_mods &rArr; oneshot_mods_changed_kb &rArr; oneshot_mods_changed_user
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_keyboard_report
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_mods
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_key
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_key
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_record_quantum
</UL>

<P><STRONG><a name="[26f]"></a>process_magic</STRONG> (Thumb, 808 bytes, Stack size 24 bytes, process_magic.o(.text.process_magic))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = process_magic &rArr; eeconfig_update_handedness &rArr; eeprom_update_byte &rArr; eeprom_read_byte &rArr; eeprom_read_block &rArr; clamp_length
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_keyboard
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeconfig_update_handedness
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeconfig_update_keymap
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeconfig_read_keymap
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_record_quantum
</UL>

<P><STRONG><a name="[26c]"></a>process_record</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, action.o(.text.process_record))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = process_record &rArr; process_record_handler &rArr; process_action &rArr;  process_record (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_record_handler
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_oneshot_layer_state
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_oneshot_layer_active
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IS_NOEVENT
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_record_quantum
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_process_record_quantum
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_action
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;waiting_buffer_scan_tap
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_tapping
</UL>

<P><STRONG><a name="[271]"></a>process_record_handler</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, action.o(.text.process_record_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = process_record_handler &rArr; process_action &rArr;  process_record (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_action
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_action
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_or_get_action
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layer_debug
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_layer_debug
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_record
</UL>

<P><STRONG><a name="[274]"></a>process_record_kb</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, quantum.o(.text.process_record_kb))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = process_record_kb &rArr; process_record_user
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_record_user
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_record_quantum
</UL>

<P><STRONG><a name="[270]"></a>process_record_quantum</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, quantum.o(.text.process_record_quantum))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = process_record_quantum &rArr; process_space_cadet &rArr; perform_space_cadet &rArr; tap_code &rArr; tap_code_delay &rArr; chThdSleep &rArr; chThdSleepS &rArr; chSchGoSleepTimeoutS &rArr; chVTDoSetI &rArr; vt_enqueue &rArr; ch_dlist_insert &rArr; ch_dlist_insert_before
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oneshot_disable
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oneshot_enable
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oneshot_toggle
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeconfig_disable
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_grave_esc
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_magic
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_space_cadet
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_record_keycode
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_reset_keyboard
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_keyboard
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_record_kb
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_action_kb
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_record
</UL>

<P><STRONG><a name="[27a]"></a>process_record_tap_hint</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, action.o(.text.process_record_tap_hint))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = process_record_tap_hint &rArr; layer_switch_get_action &rArr; layer_switch_get_layer &rArr; action_for_key &rArr; action_for_keycode &rArr; keycode_config
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IS_KEYEVENT
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layer_switch_get_action
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_tapping
</UL>

<P><STRONG><a name="[275]"></a>process_record_user</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, quantum.o(.text.process_record_user))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = process_record_user
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_record_kb
</UL>

<P><STRONG><a name="[276]"></a>process_space_cadet</STRONG> (Thumb, 284 bytes, Stack size 32 bytes, process_space_cadet.o(.text.process_space_cadet))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = process_space_cadet &rArr; perform_space_cadet &rArr; tap_code &rArr; tap_code_delay &rArr; chThdSleep &rArr; chThdSleepS &rArr; chSchGoSleepTimeoutS &rArr; chVTDoSetI &rArr; vt_enqueue &rArr; ch_dlist_insert &rArr; ch_dlist_insert_before
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perform_space_cadet
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_record_quantum
</UL>

<P><STRONG><a name="[1d8]"></a>protocol_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, main.o(.text.protocol_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = protocol_init &rArr; protocol_pre_init &rArr; init_usb_driver &rArr; chThdSleep &rArr; chThdSleepS &rArr; chSchGoSleepTimeoutS &rArr; chVTDoSetI &rArr; vt_enqueue &rArr; ch_dlist_insert &rArr; ch_dlist_insert_before
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_post_init
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_pre_init
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[280]"></a>protocol_post_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, chibios.o(.text.protocol_post_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = protocol_post_init &rArr; host_set_driver
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_set_driver
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_init
</UL>

<P><STRONG><a name="[28a]"></a>protocol_post_task</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, chibios.o(.text.protocol_post_task))
<BR><BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_task
</UL>

<P><STRONG><a name="[27f]"></a>protocol_pre_init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, chibios.o(.text.protocol_pre_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = protocol_pre_init &rArr; init_usb_driver &rArr; chThdSleep &rArr; chThdSleepS &rArr; chSchGoSleepTimeoutS &rArr; chVTDoSetI &rArr; vt_enqueue &rArr; ch_dlist_insert &rArr; ch_dlist_insert_before
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdSleep
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_usb_driver
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_event_queue_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_init
</UL>

<P><STRONG><a name="[283]"></a>protocol_pre_task</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, chibios.o(.text.protocol_pre_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = protocol_pre_task &rArr; suspend_wakeup_condition &rArr; matrix_scan &rArr; matrix_read_cols_on_row &rArr; matrix_output_unselect_delay &rArr; matrix_io_delay &rArr; chThdSleep &rArr; chThdSleepS &rArr; chSchGoSleepTimeoutS &rArr; chVTDoSetI &rArr; vt_enqueue &rArr; ch_dlist_insert &rArr; ch_dlist_insert_before
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbWakeupHost
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restart_usb_driver
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_keyboard_report
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suspend_wakeup_condition
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suspend_power_down
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_event_queue_task
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_task
</UL>

<P><STRONG><a name="[1d7]"></a>protocol_setup</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, chibios.o(.text.protocol_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = protocol_setup &rArr; usb_device_state_init &rArr; notify_usb_device_state_change &rArr; notify_usb_device_state_change_kb &rArr; notify_usb_device_state_change_user
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_device_state_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1d9]"></a>protocol_task</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, main.o(.text.protocol_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 852<LI>Call Chain = protocol_task &rArr; keyboard_task &rArr; matrix_task &rArr; generate_tick_event &rArr; action_exec &rArr; action_tapping_process &rArr; process_tapping &rArr; waiting_buffer_scan_tap &rArr; process_record &rArr; process_record_handler &rArr; process_action &rArr;  process_record (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_post_task
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_pre_task
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_task
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[183]"></a>pwmInit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hal_pwm.o(.text.pwmInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pwmInit
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_lld_init
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halInit
</UL>

<P><STRONG><a name="[28b]"></a>pwm_lld_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hal_pwm_lld.o(.text.pwm_lld_init))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmInit
</UL>

<P><STRONG><a name="[28c]"></a>qmkusbConfigureHookI</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, usb_driver.o(.text.qmkusbConfigureHookI))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = qmkusbConfigureHookI &rArr; qmkusb_start_receive &rArr; usbStartReceiveI &rArr; usb_lld_start_out &rArr; usbd_ep_start_read &rArr; musb_set_active_ep
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obqResetI
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ibqResetI
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalEventBroadcastFlagsI
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmkusb_start_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_event_cb
</UL>

<P><STRONG><a name="[1a0]"></a>qmkusbObjectInit</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, usb_driver.o(.text.qmkusbObjectInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = qmkusbObjectInit &rArr; obqObjectInit &rArr; osalThreadQueueObjectInit &rArr; chThdQueueObjectInit &rArr; ch_queue_init
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obqObjectInit
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ibqObjectInit
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalEventObjectInit
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_usb_driver
</UL>

<P><STRONG><a name="[2c7]"></a>qmkusbRequestsHook</STRONG> (Thumb, 148 bytes, Stack size 12 bytes, usb_driver.o(.text.qmkusbRequestsHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = qmkusbRequestsHook
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_requests_hook_cb
</UL>

<P><STRONG><a name="[28d]"></a>qmkusbSOFHookI</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, usb_driver.o(.text.qmkusbSOFHookI))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = qmkusbSOFHookI &rArr; usbStartTransmitI &rArr; usb_lld_start_in &rArr; usbd_ep_start_write &rArr; usbd_write_packet &rArr; usb_ep_in_data_avail &rArr; es_usbd_ep_tx_ready_state
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbStartTransmitI
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obqTryFlushI
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obqGetFullBufferI
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_sof_cb
</UL>

<P><STRONG><a name="[1a1]"></a>qmkusbStart</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, usb_driver.o(.text.qmkusbStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = qmkusbStart &rArr; osalSysLock &rArr; chSysLock &rArr; port_lock
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalSysUnlock
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalSysLock
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_usb_driver
</UL>

<P><STRONG><a name="[28f]"></a>qmkusbSuspendHookI</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, usb_driver.o(.text.qmkusbSuspendHookI))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = qmkusbSuspendHookI &rArr; osalThreadDequeueAllI &rArr; chThdDequeueAllI &rArr; chThdDoDequeueNextI &rArr; chSchReadyI &rArr; __sch_ready_behind &rArr; ch_pqueue_insert_behind
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalThreadDequeueAllI
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalEventBroadcastFlagsI
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_event_cb
</UL>

<P><STRONG><a name="[290]"></a>qmkusbWakeupHookI</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, usb_driver.o(.text.qmkusbWakeupHookI))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = qmkusbWakeupHookI &rArr; osalEventBroadcastFlagsI &rArr; chEvtBroadcastFlagsI &rArr; chEvtSignalI &rArr; chSchReadyI &rArr; __sch_ready_behind &rArr; ch_pqueue_insert_behind
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalEventBroadcastFlagsI
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_event_cb
</UL>

<P><STRONG><a name="[1b1]"></a>quantum_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, keyboard.o(.text.quantum_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = quantum_init &rArr; magic &rArr; eeconfig_init &rArr; eeconfig_init_quantum &rArr; eeconfig_init_kb &rArr; eeconfig_init_user &rArr; eeconfig_update_user &rArr; eeprom_update_dword &rArr; eeprom_read_dword &rArr; eeprom_read_block &rArr; clamp_length
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;magic
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init_ports
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_init
</UL>

<P><STRONG><a name="[1bc]"></a>quantum_task</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keyboard.o(.text.quantum_task))
<BR><BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_task
</UL>

<P><STRONG><a name="[177]"></a>read_source_layers_cache</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, action_layer.o(.text.read_source_layers_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = read_source_layers_cache &rArr; read_source_layers_cache_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_source_layers_cache_impl
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_or_get_action
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_event_keycode
</UL>

<P><STRONG><a name="[292]"></a>read_source_layers_cache_impl</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, action_layer.o(.text.read_source_layers_cache_impl))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = read_source_layers_cache_impl
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_source_layers_cache
</UL>

<P><STRONG><a name="[266]"></a>register_code</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, action.o(.text.register_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = register_code &rArr; send_keyboard_report &rArr; send_6kro_report &rArr; get_mods_for_report &rArr; clear_oneshot_mods &rArr; oneshot_mods_changed_kb &rArr; oneshot_mods_changed_user
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_mouse
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_keyboard_report
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_mods
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_key
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_key
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_key_pressed
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_action
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tap_code_delay
</UL>

<P><STRONG><a name="[24f]"></a>register_mods</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, action.o(.text.register_mods))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = register_mods &rArr; send_keyboard_report &rArr; send_6kro_report &rArr; get_mods_for_report &rArr; clear_oneshot_mods &rArr; oneshot_mods_changed_kb &rArr; oneshot_mods_changed_user
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_keyboard_report
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_mods
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_action
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perform_space_cadet
</UL>

<P><STRONG><a name="[26a]"></a>register_mouse</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, action.o(.text.register_mouse))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = register_mouse
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_action
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unregister_code
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_code
</UL>

<P><STRONG><a name="[277]"></a>reset_keyboard</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, quantum.o(.text.reset_keyboard))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = reset_keyboard &rArr; shutdown_quantum &rArr; chThdSleep &rArr; chThdSleepS &rArr; chSchGoSleepTimeoutS &rArr; chVTDoSetI &rArr; vt_enqueue &rArr; ch_dlist_insert &rArr; ch_dlist_insert_before
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_jump
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shutdown_quantum
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_record_quantum
</UL>

<P><STRONG><a name="[137]"></a>reset_oneshot_layer</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, action_util.o(.text.reset_oneshot_layer))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = reset_oneshot_layer &rArr; oneshot_layer_changed_kb &rArr; oneshot_layer_changed_user
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oneshot_layer_changed_kb
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_oneshot_layer
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_oneshot_layer_state
</UL>

<P><STRONG><a name="[288]"></a>restart_usb_driver</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, board.o(.text.restart_usb_driver))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = restart_usb_driver
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_pre_task
</UL>

<P><STRONG><a name="[6b]"></a>rt_hw_hard_fault_exception</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, hal_lld.o(.text.rt_hw_hard_fault_exception))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = rt_hw_hard_fault_exception &rArr; es_test_printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_test_printf
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffffff
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[298]"></a>send_6kro_report</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, action_util.o(.text.send_6kro_report))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = send_6kro_report &rArr; get_mods_for_report &rArr; clear_oneshot_mods &rArr; oneshot_mods_changed_kb &rArr; oneshot_mods_changed_user
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_keyboard_send
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_mods_for_report
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_keyboard_report
</UL>

<P><STRONG><a name="[50]"></a>send_extra</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, usb_main.o(.text.send_extra))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = send_extra
</UL>
<BR>[Address Reference Count : 1]<UL><LI> chibios.o(.data.chibios_driver)
</UL>
<P><STRONG><a name="[4d]"></a>send_keyboard</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, usb_main.o(.text.send_keyboard))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = send_keyboard &rArr; send_report &rArr; usbStartTransmitI &rArr; usb_lld_start_in &rArr; usbd_ep_start_write &rArr; usbd_write_packet &rArr; usb_ep_in_data_avail &rArr; es_usbd_ep_tx_ready_state
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_report
</UL>
<BR>[Address Reference Count : 1]<UL><LI> chibios.o(.data.chibios_driver)
</UL>
<P><STRONG><a name="[131]"></a>send_keyboard_report</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, action_util.o(.text.send_keyboard_report))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = send_keyboard_report &rArr; send_6kro_report &rArr; get_mods_for_report &rArr; clear_oneshot_mods &rArr; oneshot_mods_changed_kb &rArr; oneshot_mods_changed_user
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_6kro_report
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_action
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_grave_esc
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unregister_mods
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unregister_code
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_mods
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_code
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_pre_task
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_keyboard_but_mods_and_keys
</UL>

<P><STRONG><a name="[4f]"></a>send_mouse</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, usb_main.o(.text.send_mouse))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = send_mouse
</UL>
<BR>[Address Reference Count : 1]<UL><LI> chibios.o(.data.chibios_driver)
</UL>
<P><STRONG><a name="[4e]"></a>send_nkro</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, usb_main.o(.text.send_nkro))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = send_nkro
</UL>
<BR>[Address Reference Count : 1]<UL><LI> chibios.o(.data.chibios_driver)
</UL>
<P><STRONG><a name="[29a]"></a>send_report</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, usb_main.o(.text.send_report))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = send_report &rArr; usbStartTransmitI &rArr; usb_lld_start_in &rArr; usbd_ep_start_write &rArr; usbd_write_packet &rArr; usb_ep_in_data_avail &rArr; es_usbd_ep_tx_ready_state
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbStartTransmitI
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalThreadSuspendTimeoutS
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalSysUnlock
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalSysLock
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_keyboard
</UL>

<P><STRONG><a name="[37]"></a>sendchar</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, sendchar.o(.text.sendchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = sendchar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(.text.keyboard_setup)
</UL>
<P><STRONG><a name="[26b]"></a>set_oneshot_layer</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, action_util.o(.text.set_oneshot_layer))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = set_oneshot_layer &rArr; layer_on &rArr; layer_state_set &rArr; layer_state_set_kb &rArr; layer_state_set_user
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layer_on
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oneshot_layer_changed_kb
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_oneshot_layer
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_action
</UL>

<P><STRONG><a name="[1ed]"></a>should_process_keypress</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, keyboard.o(.text.should_process_keypress))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = should_process_keypress
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_keyboard_master
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_task
</UL>

<P><STRONG><a name="[29d]"></a>shutdown_kb</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, quantum.o(.text.shutdown_kb))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = shutdown_kb &rArr; shutdown_user
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shutdown_user
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shutdown_quantum
</UL>

<P><STRONG><a name="[294]"></a>shutdown_quantum</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, quantum.o(.text.shutdown_quantum))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = shutdown_quantum &rArr; chThdSleep &rArr; chThdSleepS &rArr; chSchGoSleepTimeoutS &rArr; chVTDoSetI &rArr; vt_enqueue &rArr; ch_dlist_insert &rArr; ch_dlist_insert_before
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdSleep
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shutdown_kb
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_keyboard
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_reset_keyboard
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_keyboard
</UL>

<P><STRONG><a name="[29e]"></a>shutdown_user</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, quantum.o(.text.shutdown_user))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = shutdown_user
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shutdown_kb
</UL>

<P><STRONG><a name="[278]"></a>soft_reset_keyboard</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, quantum.o(.text.soft_reset_keyboard))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = soft_reset_keyboard &rArr; shutdown_quantum &rArr; chThdSleep &rArr; chThdSleepS &rArr; chSchGoSleepTimeoutS &rArr; chVTDoSetI &rArr; vt_enqueue &rArr; ch_dlist_insert &rArr; ch_dlist_insert_before
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_reset
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shutdown_quantum
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_record_quantum
</UL>

<P><STRONG><a name="[185]"></a>stInit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hal_st.o(.text.stInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = stInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_lld_init
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halInit
</UL>

<P><STRONG><a name="[2a0]"></a>st_lld_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hal_st_lld.o(.text.st_lld_init))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stInit
</UL>

<P><STRONG><a name="[272]"></a>store_or_get_action</STRONG> (Thumb, 140 bytes, Stack size 48 bytes, action_layer.o(.text.store_or_get_action))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = store_or_get_action &rArr; layer_switch_get_action &rArr; layer_switch_get_layer &rArr; action_for_key &rArr; action_for_keycode &rArr; keycode_config
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_for_key
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layer_switch_get_action
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_source_layers_cache
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_source_layers_cache
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layer_switch_get_layer
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_record_handler
</UL>

<P><STRONG><a name="[285]"></a>suspend_power_down</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, es_app.o(.text.suspend_power_down))
<BR><BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_pre_task
</UL>

<P><STRONG><a name="[286]"></a>suspend_wakeup_condition</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, suspend.o(.text.suspend_wakeup_condition))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = suspend_wakeup_condition &rArr; matrix_scan &rArr; matrix_read_cols_on_row &rArr; matrix_output_unselect_delay &rArr; matrix_io_delay &rArr; chThdSleep &rArr; chThdSleepS &rArr; chSchGoSleepTimeoutS &rArr; chVTDoSetI &rArr; vt_enqueue &rArr; ch_dlist_insert &rArr; ch_dlist_insert_before
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_get_row
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_scan
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_power_down
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_power_up
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_pre_task
</UL>

<P><STRONG><a name="[2ba]"></a>suspend_wakeup_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, es_app.o(.text.suspend_wakeup_init))
<BR><BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_event_wakeup_handler
</UL>

<P><STRONG><a name="[1ef]"></a>switch_events</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, keyboard.o(.text.switch_events))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = switch_events
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_task
</UL>

<P><STRONG><a name="[252]"></a>tap_code</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, action.o(.text.tap_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = tap_code &rArr; tap_code_delay &rArr; chThdSleep &rArr; chThdSleepS &rArr; chSchGoSleepTimeoutS &rArr; chVTDoSetI &rArr; vt_enqueue &rArr; ch_dlist_insert &rArr; ch_dlist_insert_before
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tap_code_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perform_space_cadet
</UL>

<P><STRONG><a name="[2a3]"></a>tap_code_delay</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, action.o(.text.tap_code_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = tap_code_delay &rArr; chThdSleep &rArr; chThdSleepS &rArr; chSchGoSleepTimeoutS &rArr; chVTDoSetI &rArr; vt_enqueue &rArr; ch_dlist_insert &rArr; ch_dlist_insert_before
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdSleep
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unregister_code
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_code
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tap_code
</UL>

<P><STRONG><a name="[2a4]"></a>timer_clear</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, timer.o(.text.timer_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = timer_clear &rArr; get_system_time_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSysUnlock
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_system_time_ticks
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSysLock
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
</UL>

<P><STRONG><a name="[250]"></a>timer_elapsed</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, timer.o(.text.timer_elapsed))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = timer_elapsed &rArr; timer_read &rArr; timer_read32 &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_read
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perform_space_cadet
</UL>

<P><STRONG><a name="[2a5]"></a>timer_elapsed32</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, timer.o(.text.timer_elapsed32))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = timer_elapsed32 &rArr; timer_read32 &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_read32
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_elapsed_fast
</UL>

<P><STRONG><a name="[13b]"></a>timer_elapsed_fast</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, es_app.o(.text.timer_elapsed_fast))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = timer_elapsed_fast &rArr; timer_elapsed32 &rArr; timer_read32 &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_elapsed32
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debounce
</UL>

<P><STRONG><a name="[1af]"></a>timer_init</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, timer.o(.text.timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = timer_init &rArr; chVTSet &rArr; chVTSetI &rArr; chVTDoSetI &rArr; vt_enqueue &rArr; ch_dlist_insert &rArr; ch_dlist_insert_before
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_clear
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chVTSet
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chVTObjectInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_init
</UL>

<P><STRONG><a name="[173]"></a>timer_read</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, timer.o(.text.timer_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = timer_read &rArr; timer_read32 &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_read32
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_elapsed
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perform_space_cadet
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_tick_event
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_task
</UL>

<P><STRONG><a name="[1c0]"></a>timer_read32</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, timer.o(.text.timer_read32))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = timer_read32 &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSysUnlock
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_system_time_ticks
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSysLock
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_read_fast
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_read
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;last_matrix_activity_trigger
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_task
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_elapsed32
</UL>

<P><STRONG><a name="[13a]"></a>timer_read_fast</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, es_app.o(.text.timer_read_fast))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = timer_read_fast &rArr; timer_read32 &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_read32
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debounce
</UL>

<P><STRONG><a name="[267]"></a>unregister_code</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, action.o(.text.unregister_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = unregister_code &rArr; send_keyboard_report &rArr; send_6kro_report &rArr; get_mods_for_report &rArr; clear_oneshot_mods &rArr; oneshot_mods_changed_kb &rArr; oneshot_mods_changed_user
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_mouse
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_mods
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_keyboard_report
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_key
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_action
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tap_code_delay
</UL>

<P><STRONG><a name="[251]"></a>unregister_mods</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, action.o(.text.unregister_mods))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = unregister_mods &rArr; send_keyboard_report &rArr; send_6kro_report &rArr; get_mods_for_report &rArr; clear_oneshot_mods &rArr; oneshot_mods_changed_kb &rArr; oneshot_mods_changed_user
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_mods
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_keyboard_report
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_action
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perform_space_cadet
</UL>

<P><STRONG><a name="[176]"></a>update_source_layers_cache</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, action_layer.o(.text.update_source_layers_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = update_source_layers_cache &rArr; update_source_layers_cache_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_source_layers_cache_impl
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_or_get_action
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_event_keycode
</UL>

<P><STRONG><a name="[2a7]"></a>update_source_layers_cache_impl</STRONG> (Thumb, 132 bytes, Stack size 56 bytes, action_layer.o(.text.update_source_layers_cache_impl))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = update_source_layers_cache_impl
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_source_layers_cache
</UL>

<P><STRONG><a name="[141]"></a>usbDisableEndpointsI</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, hal_usb.o(.text.usbDisableEndpointsI))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = usbDisableEndpointsI &rArr; osalThreadResumeI &rArr; chThdResumeI &rArr; chSchReadyI &rArr; __sch_ready_behind &rArr; ch_pqueue_insert_behind
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_lld_disable_endpoints
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalThreadResumeI
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_handler
</UL>

<P><STRONG><a name="[184]"></a>usbInit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hal_usb.o(.text.usbInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = usbInit &rArr; usb_lld_init &rArr; es_test_printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_lld_init
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halInit
</UL>

<P><STRONG><a name="[2aa]"></a>usbInitEndpointI</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, hal_usb.o(.text.usbInitEndpointI))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = usbInitEndpointI &rArr; usb_lld_init_endpoint &rArr; es_usbd_get_fifo_size16_log2_min8
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_lld_init_endpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_event_cb
</UL>

<P><STRONG><a name="[2bd]"></a>usbObjectInit</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, hal_usb.o(.text.usbObjectInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usbObjectInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_lld_init
</UL>

<P><STRONG><a name="[1a4]"></a>usbStart</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, hal_usb.o(.text.usbStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = usbStart &rArr; usb_lld_start &rArr; ald_usb_int_register &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_lld_start
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalSysUnlock
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalSysLock
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_usb_driver
</UL>

<P><STRONG><a name="[9e]"></a>usbStartReceiveI</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, hal_usb.o(.text.usbStartReceiveI))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = usbStartReceiveI &rArr; usb_lld_start_out &rArr; usbd_ep_start_read &rArr; musb_set_active_ep
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_lld_start_out
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_usb_ep0in
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_usb_ep0setup
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmkusb_start_receive
</UL>

<P><STRONG><a name="[9c]"></a>usbStartTransmitI</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, hal_usb.o(.text.usbStartTransmitI))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = usbStartTransmitI &rArr; usb_lld_start_in &rArr; usbd_ep_start_write &rArr; usbd_write_packet &rArr; usb_ep_in_data_avail &rArr; es_usbd_ep_tx_ready_state
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_lld_start_in
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_usb_ep0out
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_usb_ep0in
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_usb_ep0setup
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmkusbSOFHookI
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obnotify
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_report
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_idle_timer_cb
</UL>

<P><STRONG><a name="[1a3]"></a>usbStop</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, hal_usb.o(.text.usbStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = usbStop &rArr; osalThreadResumeI &rArr; chThdResumeI &rArr; chSchReadyI &rArr; __sch_ready_behind &rArr; ch_pqueue_insert_behind
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_lld_stop
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalOsRescheduleS
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalThreadResumeI
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalSysUnlock
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalSysLock
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_usb_driver
</UL>

<P><STRONG><a name="[287]"></a>usbWakeupHost</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, hal_usb.o(.text.usbWakeupHost))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = usbWakeupHost
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_pre_task
</UL>

<P><STRONG><a name="[289]"></a>usb_device_state_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usb_device_state.o(.text.usb_device_state_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = usb_device_state_init &rArr; notify_usb_device_state_change &rArr; notify_usb_device_state_change_kb &rArr; notify_usb_device_state_change_user
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notify_usb_device_state_change
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_setup
</UL>

<P><STRONG><a name="[2b0]"></a>usb_device_state_set_configuration</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, usb_device_state.o(.text.usb_device_state_set_configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = usb_device_state_set_configuration &rArr; notify_usb_device_state_change &rArr; notify_usb_device_state_change_kb &rArr; notify_usb_device_state_change_user
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notify_usb_device_state_change
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_event_queue_task
</UL>

<P><STRONG><a name="[2b1]"></a>usb_device_state_set_reset</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usb_device_state.o(.text.usb_device_state_set_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = usb_device_state_set_reset &rArr; notify_usb_device_state_change &rArr; notify_usb_device_state_change_kb &rArr; notify_usb_device_state_change_user
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notify_usb_device_state_change
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_event_queue_task
</UL>

<P><STRONG><a name="[2b2]"></a>usb_device_state_set_resume</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, usb_device_state.o(.text.usb_device_state_set_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = usb_device_state_set_resume &rArr; notify_usb_device_state_change &rArr; notify_usb_device_state_change_kb &rArr; notify_usb_device_state_change_user
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notify_usb_device_state_change
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_event_wakeup_handler
</UL>

<P><STRONG><a name="[2b3]"></a>usb_device_state_set_suspend</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, usb_device_state.o(.text.usb_device_state_set_suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = usb_device_state_set_suspend &rArr; notify_usb_device_state_change &rArr; notify_usb_device_state_change_kb &rArr; notify_usb_device_state_change_user
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notify_usb_device_state_change
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_event_suspend_handler
</UL>

<P><STRONG><a name="[2b4]"></a>usb_ep_in_data_avail</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, hal_usb_lld.o(.text.usb_ep_in_data_avail))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = usb_ep_in_data_avail &rArr; es_usbd_ep_tx_ready_state
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_usbd_ep_tx_ready_state
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;musb_set_active_ep
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;musb_get_active_ep
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_write_packet
</UL>

<P><STRONG><a name="[282]"></a>usb_event_queue_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usb_main.o(.text.usb_event_queue_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usb_event_queue_init
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_pre_init
</UL>

<P><STRONG><a name="[284]"></a>usb_event_queue_task</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, usb_main.o(.text.usb_event_queue_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = usb_event_queue_task &rArr; usb_event_wakeup_handler &rArr; usb_device_state_set_resume &rArr; notify_usb_device_state_change &rArr; notify_usb_device_state_change_kb &rArr; notify_usb_device_state_change_user
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_event_wakeup_handler
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_event_suspend_handler
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_event_queue_dequeue
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_device_state_set_reset
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_device_state_set_configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_pre_task
</UL>

<P><STRONG><a name="[144]"></a>usb_lld_clear_in</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, hal_usb_lld.o(.text.usb_lld_clear_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = usb_lld_clear_in &rArr; es_test_printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_test_printf
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ald_usb_dev_ep_stall_clear
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;musb_set_active_ep
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;musb_get_active_ep
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_handler
</UL>

<P><STRONG><a name="[145]"></a>usb_lld_clear_out</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, hal_usb_lld.o(.text.usb_lld_clear_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = usb_lld_clear_out &rArr; es_test_printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_test_printf
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ald_usb_dev_ep_stall_clear
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;musb_set_active_ep
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;musb_get_active_ep
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_handler
</UL>

<P><STRONG><a name="[2a8]"></a>usb_lld_disable_endpoints</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, hal_usb_lld.o(.text.usb_lld_disable_endpoints))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = usb_lld_disable_endpoints &rArr; es_test_printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_test_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbDisableEndpointsI
</UL>

<P><STRONG><a name="[142]"></a>usb_lld_get_status_in</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, hal_usb_lld.o(.text.usb_lld_get_status_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = usb_lld_get_status_in &rArr; es_test_printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_test_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_handler
</UL>

<P><STRONG><a name="[143]"></a>usb_lld_get_status_out</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, hal_usb_lld.o(.text.usb_lld_get_status_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = usb_lld_get_status_out &rArr; es_test_printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_test_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_handler
</UL>

<P><STRONG><a name="[2a9]"></a>usb_lld_init</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, hal_usb_lld.o(.text.usb_lld_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = usb_lld_init &rArr; es_test_printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_test_printf
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbObjectInit
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbInit
</UL>

<P><STRONG><a name="[2ab]"></a>usb_lld_init_endpoint</STRONG> (Thumb, 492 bytes, Stack size 56 bytes, hal_usb_lld.o(.text.usb_lld_init_endpoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = usb_lld_init_endpoint &rArr; es_usbd_get_fifo_size16_log2_min8
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_test_printf
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ald_usb_dev_ep_config
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ald_usb_fifo_config_set_no_assert
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_usbd_get_fifo_size16_log2_min8
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;musb_set_active_ep
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;musb_get_active_ep
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbInitEndpointI
</UL>

<P><STRONG><a name="[a1]"></a>usb_lld_read_setup</STRONG> (Thumb, 192 bytes, Stack size 40 bytes, hal_usb_lld.o(.text.usb_lld_read_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = usb_lld_read_setup &rArr; es_test_printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_test_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_usb_ep0setup
</UL>

<P><STRONG><a name="[29b]"></a>usb_lld_set_address</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, hal_usb_lld.o(.text.usb_lld_set_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = usb_lld_set_address &rArr; es_test_printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_test_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_address
</UL>

<P><STRONG><a name="[9f]"></a>usb_lld_stall_in</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, hal_usb_lld.o(.text.usb_lld_stall_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = usb_lld_stall_in &rArr; es_test_printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_test_printf
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ald_usb_dev_ep_stall
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;musb_set_active_ep
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;musb_get_active_ep
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_usb_ep0out
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_usb_ep0in
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_usb_ep0setup
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_handler
</UL>

<P><STRONG><a name="[a0]"></a>usb_lld_stall_out</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, hal_usb_lld.o(.text.usb_lld_stall_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = usb_lld_stall_out &rArr; es_test_printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_test_printf
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ald_usb_dev_ep_stall
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;musb_set_active_ep
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;musb_get_active_ep
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_usb_ep0out
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_usb_ep0in
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_usb_ep0setup
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_handler
</UL>

<P><STRONG><a name="[2ac]"></a>usb_lld_start</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, hal_usb_lld.o(.text.usb_lld_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = usb_lld_start &rArr; ald_usb_int_register &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_test_printf
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ald_usb_int_register
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ald_usb_int_enable_ep
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ald_usb_int_enable
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ald_usb_int_status_ep_get
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ald_usb_int_status_get
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ald_usb_device_components_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbStart
</UL>

<P><STRONG><a name="[2ae]"></a>usb_lld_start_in</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, hal_usb_lld.o(.text.usb_lld_start_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = usb_lld_start_in &rArr; usbd_ep_start_write &rArr; usbd_write_packet &rArr; usb_ep_in_data_avail &rArr; es_usbd_ep_tx_ready_state
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_test_printf
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_start_write
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbStartTransmitI
</UL>

<P><STRONG><a name="[2ad]"></a>usb_lld_start_out</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, hal_usb_lld.o(.text.usb_lld_start_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = usb_lld_start_out &rArr; usbd_ep_start_read &rArr; musb_set_active_ep
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_test_printf
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_start_read
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbStartReceiveI
</UL>

<P><STRONG><a name="[2af]"></a>usb_lld_stop</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, hal_usb_lld.o(.text.usb_lld_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = usb_lld_stop &rArr; es_test_printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_test_printf
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ald_usb_int_unregister
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbStop
</UL>

<P><STRONG><a name="[2c6]"></a>usbd_ep_start_read</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, hal_usb_lld.o(.text.usbd_ep_start_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = usbd_ep_start_read &rArr; musb_set_active_ep
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;musb_set_active_ep
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;musb_get_active_ep
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_lld_start_out
</UL>

<P><STRONG><a name="[191]"></a>usbd_ep_start_write</STRONG> (Thumb, 388 bytes, Stack size 48 bytes, hal_usb_lld.o(.text.usbd_ep_start_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = usbd_ep_start_write &rArr; usbd_write_packet &rArr; usb_ep_in_data_avail &rArr; es_usbd_ep_tx_ready_state
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_write_packet
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;musb_set_active_ep
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;musb_get_active_ep
</UL>
<BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_lld_start_in
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_ep0
</UL>

<P><STRONG><a name="[190]"></a>usbd_read_packet</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, hal_usb_lld.o(.text.usbd_read_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = usbd_read_packet &rArr; es_usb_ep_out_data_avail &rArr; ald_usb_ep_data_avail
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_usb_ep_out_data_avail
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_usbd_ep_read_packet_8bit
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;musb_set_active_ep
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;musb_get_active_ep
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_ep0
</UL>

<P><STRONG><a name="[79]"></a>usbd_write_packet</STRONG> (Thumb, 260 bytes, Stack size 40 bytes, hal_usb_lld.o(.text.usbd_write_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = usbd_write_packet &rArr; usb_ep_in_data_avail &rArr; es_usbd_ep_tx_ready_state
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_ep_in_data_avail
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_usbd_ep_write_packet_8bit
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;musb_set_active_ep
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;musb_get_active_ep
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VectorBC
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_start_write
</UL>

<P><STRONG><a name="[69]"></a>__ARM_clz</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, depilogue.o(i.__ARM_clz))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[2d9]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[2da]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[2db]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[6c]"></a>port_unlock_from_isr</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, chcore.o(.text.port_unlock_from_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = port_unlock_from_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>

<P><STRONG><a name="[259]"></a>port_unlock</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, chcore.o(.text.port_unlock))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_unlock_from_isr
</UL>

<P><STRONG><a name="[253]"></a>__NVIC_SetPriority</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, chcore.o(.text.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_init
</UL>

<P><STRONG><a name="[86]"></a>port_lock_from_isr</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, chcore.o(.text.port_lock_from_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = port_lock_from_isr &rArr; port_lock
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__port_irq_epilogue
</UL>

<P><STRONG><a name="[254]"></a>port_lock</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, chcore.o(.text.port_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = port_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_lock_from_isr
</UL>

<P><STRONG><a name="[8a]"></a>__sch_ready_behind</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, chschd.o(.text.__sch_ready_behind))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __sch_ready_behind &rArr; ch_pqueue_insert_behind
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_pqueue_insert_behind
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sch_wakeup
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchReadyI
</UL>

<P><STRONG><a name="[8b]"></a>ch_pqueue_insert_behind</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, chschd.o(.text.ch_pqueue_insert_behind))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ch_pqueue_insert_behind
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sch_ready_behind
</UL>

<P><STRONG><a name="[8d]"></a>ch_pqueue_remove_highest</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, chschd.o(.text.ch_pqueue_remove_highest))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ch_pqueue_remove_highest
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchDoPreemption
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sch_reschedule_ahead
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchGoSleepS
</UL>

<P><STRONG><a name="[d6]"></a>chVTIsArmedI</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, chschd.o(.text.chVTIsArmedI))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = chVTIsArmedI
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchGoSleepTimeoutS
</UL>

<P><STRONG><a name="[34]"></a>__sch_wakeup</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, chschd.o(.text.__sch_wakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __sch_wakeup &rArr; __sch_ready_behind &rArr; ch_pqueue_insert_behind
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_queue_dequeue
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSemFastSignalI
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSysUnlockFromISR
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSysLockFromISR
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sch_ready_behind
</UL>
<BR>[Address Reference Count : 1]<UL><LI> chschd.o(.text.chSchGoSleepTimeoutS)
</UL>
<P><STRONG><a name="[8f]"></a>chSysLockFromISR</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, chschd.o(.text.chSysLockFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = chSysLockFromISR &rArr; port_lock_from_isr &rArr; port_lock
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_lock_from_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sch_wakeup
</UL>

<P><STRONG><a name="[90]"></a>chSysUnlockFromISR</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, chschd.o(.text.chSysUnlockFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = chSysUnlockFromISR &rArr; port_unlock_from_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_unlock_from_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sch_wakeup
</UL>

<P><STRONG><a name="[91]"></a>chSemFastSignalI</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, chschd.o(.text.chSemFastSignalI))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = chSemFastSignalI
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sch_wakeup
</UL>

<P><STRONG><a name="[92]"></a>ch_queue_dequeue</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, chschd.o(.text.ch_queue_dequeue))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ch_queue_dequeue
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sch_wakeup
</UL>

<P><STRONG><a name="[88]"></a>__sch_ready_ahead</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, chschd.o(.text.__sch_ready_ahead))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __sch_ready_ahead &rArr; ch_pqueue_insert_ahead
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_pqueue_insert_ahead
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchDoPreemption
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sch_reschedule_ahead
</UL>

<P><STRONG><a name="[89]"></a>ch_pqueue_insert_ahead</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, chschd.o(.text.ch_pqueue_insert_ahead))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ch_pqueue_insert_ahead
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sch_ready_ahead
</UL>

<P><STRONG><a name="[8c]"></a>__sch_reschedule_ahead</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, chschd.o(.text.__sch_reschedule_ahead))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __sch_reschedule_ahead &rArr; __sch_ready_ahead &rArr; ch_pqueue_insert_ahead
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__port_switch
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sch_ready_ahead
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_pqueue_remove_highest
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchRescheduleS
</UL>

<P><STRONG><a name="[e8]"></a>port_lock_from_isr</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, chschd.o(.text.port_lock_from_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = port_lock_from_isr &rArr; port_lock
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSysLockFromISR
</UL>

<P><STRONG><a name="[105]"></a>port_unlock_from_isr</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, chschd.o(.text.port_unlock_from_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = port_unlock_from_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSysUnlockFromISR
</UL>

<P><STRONG><a name="[255]"></a>port_lock</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, chschd.o(.text.port_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = port_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_lock_from_isr
</UL>

<P><STRONG><a name="[25a]"></a>port_unlock</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, chschd.o(.text.port_unlock))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_unlock_from_isr
</UL>

<P><STRONG><a name="[84]"></a>__oslib_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, chsys.o(.text.__oslib_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __oslib_init
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__core_init
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSysInit
</UL>

<P><STRONG><a name="[da]"></a>chSysUnlock</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, chsys.o(.text.chSysUnlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = chSysUnlock
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSysInit
</UL>

<P><STRONG><a name="[f7]"></a>port_unlock</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, chsys.o(.text.port_unlock))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSysUnlock
</UL>

<P><STRONG><a name="[db]"></a>chSysLock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, chthreads.o(.text.chSysLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = chSysLock &rArr; port_lock
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdSleep
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdExit
</UL>

<P><STRONG><a name="[f8]"></a>chSysUnlock</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, chthreads.o(.text.chSysUnlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = chSysUnlock
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdSleep
</UL>

<P><STRONG><a name="[dc]"></a>port_lock</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, chthreads.o(.text.port_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = port_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSysLock
</UL>

<P><STRONG><a name="[f9]"></a>port_unlock</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, chthreads.o(.text.port_unlock))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSysUnlock
</UL>

<P><STRONG><a name="[118]"></a>chThdGetSelfX</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, chthreads.o(.text.chThdGetSelfX))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdEnqueueTimeoutS
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdSuspendTimeoutS
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdExitS
</UL>

<P><STRONG><a name="[11f]"></a>chThdSleepS</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, chthreads.o(.text.chThdSleepS))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = chThdSleepS &rArr; chSchGoSleepTimeoutS &rArr; chVTDoSetI &rArr; vt_enqueue &rArr; ch_dlist_insert &rArr; ch_dlist_insert_before
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchGoSleepTimeoutS
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdSleep
</UL>

<P><STRONG><a name="[119]"></a>ch_queue_insert</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, chthreads.o(.text.ch_queue_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ch_queue_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdEnqueueTimeoutS
</UL>

<P><STRONG><a name="[114]"></a>ch_queue_notempty</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, chthreads.o(.text.ch_queue_notempty))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ch_queue_notempty
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdDequeueAllI
</UL>

<P><STRONG><a name="[115]"></a>chThdDoDequeueNextI</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, chthreads.o(.text.chThdDoDequeueNextI))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = chThdDoDequeueNextI &rArr; chSchReadyI &rArr; __sch_ready_behind &rArr; ch_pqueue_insert_behind
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_queue_fifo_remove
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchReadyI
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdDequeueAllI
</UL>

<P><STRONG><a name="[116]"></a>ch_queue_fifo_remove</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, chthreads.o(.text.ch_queue_fifo_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ch_queue_fifo_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdDoDequeueNextI
</UL>

<P><STRONG><a name="[122]"></a>vt_enqueue</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, chvt.o(.text.vt_enqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = vt_enqueue &rArr; ch_dlist_insert &rArr; ch_dlist_insert_before
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_dlist_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chVTDoSetI
</UL>

<P><STRONG><a name="[124]"></a>ch_dlist_insert</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, chvt.o(.text.ch_dlist_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ch_dlist_insert &rArr; ch_dlist_insert_before
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_dlist_insert_before
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vt_enqueue
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chVTDoTickI
</UL>

<P><STRONG><a name="[121]"></a>ch_dlist_dequeue</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, chvt.o(.text.ch_dlist_dequeue))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ch_dlist_dequeue
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chVTDoTickI
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chVTDoResetI
</UL>

<P><STRONG><a name="[123]"></a>ch_dlist_notempty</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, chvt.o(.text.ch_dlist_notempty))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ch_dlist_notempty
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chVTDoTickI
</UL>

<P><STRONG><a name="[106]"></a>chSysUnlockFromISR</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, chvt.o(.text.chSysUnlockFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = chSysUnlockFromISR &rArr; port_unlock_from_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_unlock_from_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chVTDoTickI
</UL>

<P><STRONG><a name="[e9]"></a>chSysLockFromISR</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, chvt.o(.text.chSysLockFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = chSysLockFromISR &rArr; port_lock_from_isr &rArr; port_lock
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_lock_from_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chVTDoTickI
</UL>

<P><STRONG><a name="[107]"></a>port_unlock_from_isr</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, chvt.o(.text.port_unlock_from_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = port_unlock_from_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSysUnlockFromISR
</UL>

<P><STRONG><a name="[ea]"></a>port_lock_from_isr</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, chvt.o(.text.port_lock_from_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = port_lock_from_isr &rArr; port_lock
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSysLockFromISR
</UL>

<P><STRONG><a name="[12c]"></a>ch_dlist_insert_before</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, chvt.o(.text.ch_dlist_insert_before))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ch_dlist_insert_before
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_dlist_insert
</UL>

<P><STRONG><a name="[25b]"></a>port_unlock</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, chvt.o(.text.port_unlock))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_unlock_from_isr
</UL>

<P><STRONG><a name="[256]"></a>port_lock</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, chvt.o(.text.port_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = port_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_lock_from_isr
</UL>

<P><STRONG><a name="[ce]"></a>ch_pqueue_init</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, chinstances.o(.text.ch_pqueue_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ch_pqueue_init
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chInstanceObjectInit
</UL>

<P><STRONG><a name="[cf]"></a>__rfcu_object_init</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, chinstances.o(.text.__rfcu_object_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __rfcu_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chInstanceObjectInit
</UL>

<P><STRONG><a name="[93]"></a>__vt_object_init</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, chinstances.o(.text.__vt_object_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __vt_object_init &rArr; ch_dlist_init
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chVTGetSystemTimeX
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_dlist_init
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chInstanceObjectInit
</UL>

<P><STRONG><a name="[d0]"></a>__dbg_object_init</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, chinstances.o(.text.__dbg_object_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __dbg_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chInstanceObjectInit
</UL>

<P><STRONG><a name="[33]"></a>__idle_thread</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, chinstances.o(.text.__idle_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __idle_thread
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_wait_for_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> chinstances.o(.text.chInstanceObjectInit)
</UL>
<P><STRONG><a name="[94]"></a>ch_dlist_init</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, chinstances.o(.text.ch_dlist_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ch_dlist_init
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vt_object_init
</UL>

<P><STRONG><a name="[95]"></a>chVTGetSystemTimeX</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, chinstances.o(.text.chVTGetSystemTimeX))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vt_object_init
</UL>

<P><STRONG><a name="[7f]"></a>port_wait_for_interrupt</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, chinstances.o(.text.port_wait_for_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__idle_thread
</UL>

<P><STRONG><a name="[180]"></a>osalInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hal.o(.text.osalInit))
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halInit
</UL>

<P><STRONG><a name="[19c]"></a>osalThreadQueueObjectInit</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, hal_buffers.o(.text.osalThreadQueueObjectInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = osalThreadQueueObjectInit &rArr; chThdQueueObjectInit &rArr; ch_queue_init
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdQueueObjectInit
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obqObjectInit
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ibqObjectInit
</UL>

<P><STRONG><a name="[11b]"></a>chThdQueueObjectInit</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, hal_buffers.o(.text.chThdQueueObjectInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = chThdQueueObjectInit &rArr; ch_queue_init
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_queue_init
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalThreadQueueObjectInit
</UL>

<P><STRONG><a name="[19e]"></a>osalThreadDequeueAllI</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, hal_buffers.o(.text.osalThreadDequeueAllI))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = osalThreadDequeueAllI &rArr; chThdDequeueAllI &rArr; chThdDoDequeueNextI &rArr; chSchReadyI &rArr; __sch_ready_behind &rArr; ch_pqueue_insert_behind
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdDequeueAllI
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obqResetI
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ibqResetI
</UL>

<P><STRONG><a name="[198]"></a>osalSysLock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hal_buffers.o(.text.osalSysLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = osalSysLock &rArr; chSysLock &rArr; port_lock
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSysLock
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obqWriteTimeout
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obqPutTimeout
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ibqReadTimeout
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ibqGetTimeout
</UL>

<P><STRONG><a name="[199]"></a>osalSysUnlock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hal_buffers.o(.text.osalSysUnlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osalSysUnlock &rArr; chSysUnlock
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSysUnlock
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obqWriteTimeout
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obqPutTimeout
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ibqReadTimeout
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ibqGetTimeout
</UL>

<P><STRONG><a name="[dd]"></a>chSysLock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hal_buffers.o(.text.chSysLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = chSysLock &rArr; port_lock
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalSysLock
</UL>

<P><STRONG><a name="[197]"></a>osalThreadEnqueueTimeoutS</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, hal_buffers.o(.text.osalThreadEnqueueTimeoutS))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = osalThreadEnqueueTimeoutS &rArr; chThdEnqueueTimeoutS &rArr; chSchGoSleepTimeoutS &rArr; chVTDoSetI &rArr; vt_enqueue &rArr; ch_dlist_insert &rArr; ch_dlist_insert_before
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdEnqueueTimeoutS
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obqGetEmptyBufferTimeoutS
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ibqGetFullBufferTimeoutS
</UL>

<P><STRONG><a name="[fa]"></a>chSysUnlock</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hal_buffers.o(.text.chSysUnlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = chSysUnlock
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalSysUnlock
</UL>

<P><STRONG><a name="[11c]"></a>ch_queue_init</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, hal_buffers.o(.text.ch_queue_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ch_queue_init
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdQueueObjectInit
</UL>

<P><STRONG><a name="[de]"></a>port_lock</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, hal_buffers.o(.text.port_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = port_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSysLock
</UL>

<P><STRONG><a name="[fb]"></a>port_unlock</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hal_buffers.o(.text.port_unlock))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSysUnlock
</UL>

<P><STRONG><a name="[245]"></a>osalSysLock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hal_usb.o(.text.osalSysLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = osalSysLock &rArr; chSysLock &rArr; port_lock
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSysLock
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbStop
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbStart
</UL>

<P><STRONG><a name="[248]"></a>osalSysUnlock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hal_usb.o(.text.osalSysUnlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osalSysUnlock &rArr; chSysUnlock
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSysUnlock
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbStop
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbStart
</UL>

<P><STRONG><a name="[df]"></a>chSysLock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hal_usb.o(.text.chSysLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = chSysLock &rArr; port_lock
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalSysLock
</UL>

<P><STRONG><a name="[fc]"></a>chSysUnlock</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hal_usb.o(.text.chSysUnlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = chSysUnlock
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalSysUnlock
</UL>

<P><STRONG><a name="[24c]"></a>osalThreadResumeI</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, hal_usb.o(.text.osalThreadResumeI))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = osalThreadResumeI &rArr; chThdResumeI &rArr; chSchReadyI &rArr; __sch_ready_behind &rArr; ch_pqueue_insert_behind
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdResumeI
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbDisableEndpointsI
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbStop
</UL>

<P><STRONG><a name="[244]"></a>osalOsRescheduleS</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hal_usb.o(.text.osalOsRescheduleS))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = osalOsRescheduleS &rArr; chSchRescheduleS &rArr; __sch_reschedule_ahead &rArr; __sch_ready_ahead &rArr; ch_pqueue_insert_ahead
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchRescheduleS
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbStop
</UL>

<P><STRONG><a name="[9b]"></a>osalSysLockFromISR</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hal_usb.o(.text.osalSysLockFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = osalSysLockFromISR &rArr; chSysLockFromISR &rArr; port_lock_from_isr &rArr; port_lock
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSysLockFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_usb_ep0out
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_usb_ep0in
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_usb_ep0setup
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_handler
</UL>

<P><STRONG><a name="[9d]"></a>osalSysUnlockFromISR</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hal_usb.o(.text.osalSysUnlockFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osalSysUnlockFromISR &rArr; chSysUnlockFromISR &rArr; port_unlock_from_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSysUnlockFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_usb_ep0out
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_usb_ep0in
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_usb_ep0setup
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_handler
</UL>

<P><STRONG><a name="[eb]"></a>chSysLockFromISR</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hal_usb.o(.text.chSysLockFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = chSysLockFromISR &rArr; port_lock_from_isr &rArr; port_lock
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_lock_from_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalSysLockFromISR
</UL>

<P><STRONG><a name="[108]"></a>chSysUnlockFromISR</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hal_usb.o(.text.chSysUnlockFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = chSysUnlockFromISR &rArr; port_unlock_from_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_unlock_from_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalSysUnlockFromISR
</UL>

<P><STRONG><a name="[a2]"></a>default_handler</STRONG> (Thumb, 1128 bytes, Stack size 48 bytes, hal_usb.o(.text.default_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = default_handler &rArr; usbDisableEndpointsI &rArr; osalThreadResumeI &rArr; chThdResumeI &rArr; chSchReadyI &rArr; __sch_ready_behind &rArr; ch_pqueue_insert_behind
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_lld_clear_out
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_lld_clear_in
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_lld_get_status_out
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_lld_get_status_in
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_lld_stall_in
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_lld_stall_out
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbDisableEndpointsI
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_address
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hword
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalSysUnlockFromISR
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalSysLockFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_usb_ep0setup
</UL>

<P><STRONG><a name="[99]"></a>get_hword</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, hal_usb.o(.text.get_hword))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_hword
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_usb_ep0in
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_usb_ep0setup
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_handler
</UL>

<P><STRONG><a name="[140]"></a>set_address</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, hal_usb.o(.text.set_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = set_address &rArr; usb_lld_set_address &rArr; es_test_printf
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_lld_set_address
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_handler
</UL>

<P><STRONG><a name="[e0]"></a>port_lock</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, hal_usb.o(.text.port_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = port_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_lock_from_isr
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSysLock
</UL>

<P><STRONG><a name="[fd]"></a>port_unlock</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hal_usb.o(.text.port_unlock))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_unlock_from_isr
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSysUnlock
</UL>

<P><STRONG><a name="[ec]"></a>port_lock_from_isr</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hal_usb.o(.text.port_lock_from_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = port_lock_from_isr &rArr; port_lock
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSysLockFromISR
</UL>

<P><STRONG><a name="[109]"></a>port_unlock_from_isr</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hal_usb.o(.text.port_unlock_from_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = port_unlock_from_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSysUnlockFromISR
</UL>

<P><STRONG><a name="[188]"></a>md_rcu_enable_gpioa</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, hal_lld.o(.text.md_rcu_enable_gpioa))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = md_rcu_enable_gpioa
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_lld_init
</UL>

<P><STRONG><a name="[189]"></a>md_rcu_enable_gpiob</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, hal_lld.o(.text.md_rcu_enable_gpiob))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = md_rcu_enable_gpiob
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_lld_init
</UL>

<P><STRONG><a name="[18a]"></a>md_rcu_enable_gpioc</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, hal_lld.o(.text.md_rcu_enable_gpioc))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = md_rcu_enable_gpioc
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_lld_init
</UL>

<P><STRONG><a name="[18b]"></a>md_rcu_enable_gpiod</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, hal_lld.o(.text.md_rcu_enable_gpiod))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = md_rcu_enable_gpiod
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_lld_init
</UL>

<P><STRONG><a name="[18c]"></a>md_rcu_enable_uart1</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, hal_lld.o(.text.md_rcu_enable_uart1))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = md_rcu_enable_uart1
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_lld_init
</UL>

<P><STRONG><a name="[18d]"></a>md_rcu_enable_usb</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, hal_lld.o(.text.md_rcu_enable_usb))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = md_rcu_enable_usb
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_lld_init
</UL>

<P><STRONG><a name="[6d]"></a>osalSysLockFromISR</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hal_st_lld.o(.text.osalSysLockFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = osalSysLockFromISR &rArr; chSysLockFromISR &rArr; port_lock_from_isr &rArr; port_lock
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSysLockFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[6e]"></a>osalOsTimerHandlerI</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hal_st_lld.o(.text.osalOsTimerHandlerI))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = osalOsTimerHandlerI &rArr; chSysTimerHandlerI &rArr; chVTDoTickI &rArr; ch_dlist_insert &rArr; ch_dlist_insert_before
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSysTimerHandlerI
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[6f]"></a>osalSysUnlockFromISR</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hal_st_lld.o(.text.osalSysUnlockFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osalSysUnlockFromISR &rArr; chSysUnlockFromISR &rArr; port_unlock_from_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSysUnlockFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[ed]"></a>chSysLockFromISR</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hal_st_lld.o(.text.chSysLockFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = chSysLockFromISR &rArr; port_lock_from_isr &rArr; port_lock
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_lock_from_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalSysLockFromISR
</UL>

<P><STRONG><a name="[10a]"></a>chSysUnlockFromISR</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hal_st_lld.o(.text.chSysUnlockFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = chSysUnlockFromISR &rArr; port_unlock_from_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_unlock_from_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalSysUnlockFromISR
</UL>

<P><STRONG><a name="[ee]"></a>port_lock_from_isr</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hal_st_lld.o(.text.port_lock_from_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = port_lock_from_isr &rArr; port_lock
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSysLockFromISR
</UL>

<P><STRONG><a name="[257]"></a>port_lock</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, hal_st_lld.o(.text.port_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = port_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_lock_from_isr
</UL>

<P><STRONG><a name="[10b]"></a>port_unlock_from_isr</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hal_st_lld.o(.text.port_unlock_from_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = port_unlock_from_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSysUnlockFromISR
</UL>

<P><STRONG><a name="[25c]"></a>port_unlock</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hal_st_lld.o(.text.port_unlock))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_unlock_from_isr
</UL>

<P><STRONG><a name="[71]"></a>musb_get_active_ep</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal_usb_lld.o(.text.musb_get_active_ep))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_lld_clear_out
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_lld_clear_in
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_lld_stall_in
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_lld_stall_out
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_lld_init_endpoint
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VectorBC
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_start_read
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_start_write
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_write_packet
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_read_packet
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_ep_in_data_avail
</UL>

<P><STRONG><a name="[74]"></a>musb_set_active_ep</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, hal_usb_lld.o(.text.musb_set_active_ep))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = musb_set_active_ep
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_lld_clear_out
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_lld_clear_in
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_lld_stall_in
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_lld_stall_out
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_lld_init_endpoint
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VectorBC
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_start_read
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_start_write
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_write_packet
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_read_packet
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_ep_in_data_avail
</UL>

<P><STRONG><a name="[2b5]"></a>es_usbd_ep_tx_ready_state</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, hal_usb_lld.o(.text.es_usbd_ep_tx_ready_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = es_usbd_ep_tx_ready_state
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_ep_in_data_avail
</UL>

<P><STRONG><a name="[7b]"></a>es_usbd_ep_read_packet_8bit</STRONG> (Thumb, 68 bytes, Stack size 20 bytes, hal_usb_lld.o(.text.es_usbd_ep_read_packet_8bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = es_usbd_ep_read_packet_8bit
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VectorBC
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_read_packet
</UL>

<P><STRONG><a name="[2c8]"></a>es_usbd_ep_write_packet_8bit</STRONG> (Thumb, 68 bytes, Stack size 20 bytes, hal_usb_lld.o(.text.es_usbd_ep_write_packet_8bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = es_usbd_ep_write_packet_8bit
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_write_packet
</UL>

<P><STRONG><a name="[76]"></a>osalSysLockFromISR</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hal_usb_lld.o(.text.osalSysLockFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = osalSysLockFromISR &rArr; chSysLockFromISR &rArr; port_lock_from_isr &rArr; port_lock
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSysLockFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VectorBC
</UL>

<P><STRONG><a name="[77]"></a>osalThreadResumeI</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, hal_usb_lld.o(.text.osalThreadResumeI))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = osalThreadResumeI &rArr; chThdResumeI &rArr; chSchReadyI &rArr; __sch_ready_behind &rArr; ch_pqueue_insert_behind
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdResumeI
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VectorBC
</UL>

<P><STRONG><a name="[78]"></a>osalSysUnlockFromISR</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hal_usb_lld.o(.text.osalSysUnlockFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osalSysUnlockFromISR &rArr; chSysUnlockFromISR &rArr; port_unlock_from_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSysUnlockFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VectorBC
</UL>

<P><STRONG><a name="[ef]"></a>chSysLockFromISR</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hal_usb_lld.o(.text.chSysLockFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = chSysLockFromISR &rArr; port_lock_from_isr &rArr; port_lock
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_lock_from_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalSysLockFromISR
</UL>

<P><STRONG><a name="[10c]"></a>chSysUnlockFromISR</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hal_usb_lld.o(.text.chSysUnlockFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = chSysUnlockFromISR &rArr; port_unlock_from_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_unlock_from_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalSysUnlockFromISR
</UL>

<P><STRONG><a name="[2bf]"></a>es_usbd_get_fifo_size16_log2_min8</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, hal_usb_lld.o(.text.es_usbd_get_fifo_size16_log2_min8))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = es_usbd_get_fifo_size16_log2_min8
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_lld_init_endpoint
</UL>

<P><STRONG><a name="[f0]"></a>port_lock_from_isr</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hal_usb_lld.o(.text.port_lock_from_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = port_lock_from_isr &rArr; port_lock
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSysLockFromISR
</UL>

<P><STRONG><a name="[258]"></a>port_lock</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, hal_usb_lld.o(.text.port_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = port_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_lock_from_isr
</UL>

<P><STRONG><a name="[10d]"></a>port_unlock_from_isr</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hal_usb_lld.o(.text.port_unlock_from_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = port_unlock_from_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSysUnlockFromISR
</UL>

<P><STRONG><a name="[25d]"></a>port_unlock</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hal_usb_lld.o(.text.port_unlock))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_unlock_from_isr
</UL>

<P><STRONG><a name="[c2]"></a>__NVIC_SetPriority</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, ald_usb.o(.text.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ald_usb_int_register
</UL>

<P><STRONG><a name="[c3]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, ald_usb.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ald_usb_int_register
</UL>

<P><STRONG><a name="[c5]"></a>__NVIC_DisableIRQ</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, ald_usb.o(.text.__NVIC_DisableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ald_usb_int_unregister
</UL>

<P><STRONG><a name="[1f1]"></a>md_gpio_set_pin_function0_7</STRONG> (Thumb, 128 bytes, Stack size 28 bytes, md_gpio.o(.text.md_gpio_set_pin_function0_7))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = md_gpio_set_pin_function0_7
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_gpio_init
</UL>

<P><STRONG><a name="[1f2]"></a>md_gpio_set_pin_function8_15</STRONG> (Thumb, 132 bytes, Stack size 12 bytes, md_gpio.o(.text.md_gpio_set_pin_function8_15))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = md_gpio_set_pin_function8_15
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_gpio_init
</UL>

<P><STRONG><a name="[1f3]"></a>md_gpio_set_pin_output_type</STRONG> (Thumb, 124 bytes, Stack size 28 bytes, md_gpio.o(.text.md_gpio_set_pin_output_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = md_gpio_set_pin_output_type
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_gpio_init
</UL>

<P><STRONG><a name="[1f4]"></a>md_gpio_set_pin_pull</STRONG> (Thumb, 128 bytes, Stack size 28 bytes, md_gpio.o(.text.md_gpio_set_pin_pull))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = md_gpio_set_pin_pull
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_gpio_init
</UL>

<P><STRONG><a name="[1f5]"></a>md_gpio_set_pin_outputdriving</STRONG> (Thumb, 124 bytes, Stack size 28 bytes, md_gpio.o(.text.md_gpio_set_pin_outputdriving))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = md_gpio_set_pin_outputdriving
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_gpio_init
</UL>

<P><STRONG><a name="[1f6]"></a>md_gpio_set_pin_mode</STRONG> (Thumb, 128 bytes, Stack size 28 bytes, md_gpio.o(.text.md_gpio_set_pin_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = md_gpio_set_pin_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_gpio_init
</UL>

<P><STRONG><a name="[221]"></a>md_tick_set_rvr_reload</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, md_rcu.o(.text.md_tick_set_rvr_reload))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = md_tick_set_rvr_reload
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_tick_init_rcu
</UL>

<P><STRONG><a name="[222]"></a>md_tick_set_cvr_current</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, md_rcu.o(.text.md_tick_set_cvr_current))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = md_tick_set_cvr_current
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_tick_waitms_rcu
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_tick_init_rcu
</UL>

<P><STRONG><a name="[223]"></a>md_tick_set_csr_clksrc</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, md_rcu.o(.text.md_tick_set_csr_clksrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = md_tick_set_csr_clksrc
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_tick_init_rcu
</UL>

<P><STRONG><a name="[224]"></a>md_tick_enable_csr_enable</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, md_rcu.o(.text.md_tick_enable_csr_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = md_tick_enable_csr_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_tick_init_rcu
</UL>

<P><STRONG><a name="[225]"></a>md_tick_get_cvr_current</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, md_rcu.o(.text.md_tick_get_cvr_current))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = md_tick_get_cvr_current
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_tick_waitms_rcu
</UL>

<P><STRONG><a name="[1fa]"></a>md_rcu_is_active_flag_hosc_ready</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, md_rcu.o(.text.md_rcu_is_active_flag_hosc_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = md_rcu_is_active_flag_hosc_ready
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_rcu_sys_init
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_rcu_check_hosc_ready
</UL>

<P><STRONG><a name="[1fb]"></a>md_rcu_disable_hosc</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, md_rcu.o(.text.md_rcu_disable_hosc))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = md_rcu_disable_hosc
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_rcu_sys_init
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_rcu_check_hosc_ready
</UL>

<P><STRONG><a name="[1fc]"></a>md_rcu_enable_hosc</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, md_rcu.o(.text.md_rcu_enable_hosc))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = md_rcu_enable_hosc
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_rcu_sys_init
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_rcu_check_hosc_ready
</UL>

<P><STRONG><a name="[206]"></a>md_fc_set_read_latency</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, md_rcu.o(.text.md_fc_set_read_latency))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = md_fc_set_read_latency
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_rcu_sys_init
</UL>

<P><STRONG><a name="[205]"></a>md_rcu_enable_pll0</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, md_rcu.o(.text.md_rcu_enable_pll0))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = md_rcu_enable_pll0
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_rcu_sys_init
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_rcu_pll0_init
</UL>

<P><STRONG><a name="[1fd]"></a>md_rcu_disable_pll0</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, md_rcu.o(.text.md_rcu_disable_pll0))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = md_rcu_disable_pll0
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_rcu_sys_init
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_rcu_pll0_init
</UL>

<P><STRONG><a name="[207]"></a>md_rcu_enable_hrc48</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, md_rcu.o(.text.md_rcu_enable_hrc48))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = md_rcu_enable_hrc48
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_rcu_sys_init
</UL>

<P><STRONG><a name="[208]"></a>md_rcu_disable_hrc48</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, md_rcu.o(.text.md_rcu_disable_hrc48))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = md_rcu_disable_hrc48
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_rcu_sys_init
</UL>

<P><STRONG><a name="[209]"></a>md_rcu_enable_hrc</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, md_rcu.o(.text.md_rcu_enable_hrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = md_rcu_enable_hrc
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_rcu_sys_init
</UL>

<P><STRONG><a name="[20a]"></a>md_rcu_disable_hrc</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, md_rcu.o(.text.md_rcu_disable_hrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = md_rcu_disable_hrc
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_rcu_sys_init
</UL>

<P><STRONG><a name="[20b]"></a>md_rcu_enable_losc</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, md_rcu.o(.text.md_rcu_enable_losc))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = md_rcu_enable_losc
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_rcu_sys_init
</UL>

<P><STRONG><a name="[20c]"></a>md_rcu_disable_losc</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, md_rcu.o(.text.md_rcu_disable_losc))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = md_rcu_disable_losc
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_rcu_sys_init
</UL>

<P><STRONG><a name="[20d]"></a>md_rcu_enable_lrc</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, md_rcu.o(.text.md_rcu_enable_lrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = md_rcu_enable_lrc
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_rcu_sys_init
</UL>

<P><STRONG><a name="[20e]"></a>md_rcu_disable_lrc</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, md_rcu.o(.text.md_rcu_disable_lrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = md_rcu_disable_lrc
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_rcu_sys_init
</UL>

<P><STRONG><a name="[1fe]"></a>md_rcu_is_active_flag_pll0_ready</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, md_rcu.o(.text.md_rcu_is_active_flag_pll0_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = md_rcu_is_active_flag_pll0_ready
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_rcu_sys_init
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_rcu_pll0_init
</UL>

<P><STRONG><a name="[20f]"></a>md_rcu_is_active_flag_hrc48_ready</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, md_rcu.o(.text.md_rcu_is_active_flag_hrc48_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = md_rcu_is_active_flag_hrc48_ready
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_rcu_sys_init
</UL>

<P><STRONG><a name="[210]"></a>md_rcu_is_active_flag_hrc_ready</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, md_rcu.o(.text.md_rcu_is_active_flag_hrc_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = md_rcu_is_active_flag_hrc_ready
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_rcu_sys_init
</UL>

<P><STRONG><a name="[211]"></a>md_rcu_is_active_flag_lrc_ready</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, md_rcu.o(.text.md_rcu_is_active_flag_lrc_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = md_rcu_is_active_flag_lrc_ready
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_rcu_sys_init
</UL>

<P><STRONG><a name="[212]"></a>md_rcu_is_active_flag_losc_ready</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, md_rcu.o(.text.md_rcu_is_active_flag_losc_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = md_rcu_is_active_flag_losc_ready
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_rcu_sys_init
</UL>

<P><STRONG><a name="[213]"></a>md_rcu_set_mco_div</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, md_rcu.o(.text.md_rcu_set_mco_div))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = md_rcu_set_mco_div
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_rcu_sys_init
</UL>

<P><STRONG><a name="[214]"></a>md_rcu_set_mco_source</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, md_rcu.o(.text.md_rcu_set_mco_source))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = md_rcu_set_mco_source
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_rcu_sys_init
</UL>

<P><STRONG><a name="[215]"></a>md_rcu_set_pclk_div</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, md_rcu.o(.text.md_rcu_set_pclk_div))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = md_rcu_set_pclk_div
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_rcu_sys_init
</UL>

<P><STRONG><a name="[216]"></a>md_rcu_set_hclk_div</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, md_rcu.o(.text.md_rcu_set_hclk_div))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = md_rcu_set_hclk_div
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_rcu_sys_init
</UL>

<P><STRONG><a name="[217]"></a>md_rcu_set_system_clock_source</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, md_rcu.o(.text.md_rcu_set_system_clock_source))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = md_rcu_set_system_clock_source
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_rcu_sys_init
</UL>

<P><STRONG><a name="[218]"></a>md_rcu_get_pll_prediv</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, md_rcu.o(.text.md_rcu_get_pll_prediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = md_rcu_get_pll_prediv
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_rcu_sys_init
</UL>

<P><STRONG><a name="[219]"></a>md_rcu_get_pll0_fn</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, md_rcu.o(.text.md_rcu_get_pll0_fn))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = md_rcu_get_pll0_fn
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_rcu_sys_init
</UL>

<P><STRONG><a name="[21a]"></a>md_rcu_get_pll0_fk</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, md_rcu.o(.text.md_rcu_get_pll0_fk))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = md_rcu_get_pll0_fk
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_rcu_sys_init
</UL>

<P><STRONG><a name="[202]"></a>md_rcu_get_pll0_fm</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, md_rcu.o(.text.md_rcu_get_pll0_fm))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = md_rcu_get_pll0_fm
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_rcu_sys_init
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_rcu_pll0_init
</UL>

<P><STRONG><a name="[21b]"></a>md_rcu_get_current_system_clock</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, md_rcu.o(.text.md_rcu_get_current_system_clock))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = md_rcu_get_current_system_clock
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_rcu_sys_init
</UL>

<P><STRONG><a name="[21c]"></a>md_rcu_get_hclk_div</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, md_rcu.o(.text.md_rcu_get_hclk_div))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = md_rcu_get_hclk_div
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_rcu_sys_init
</UL>

<P><STRONG><a name="[21d]"></a>md_rcu_get_pclk_div</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, md_rcu.o(.text.md_rcu_get_pclk_div))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = md_rcu_get_pclk_div
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_rcu_sys_init
</UL>

<P><STRONG><a name="[21e]"></a>md_rcu_enable_hosc_css</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, md_rcu.o(.text.md_rcu_enable_hosc_css))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = md_rcu_enable_hosc_css
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_rcu_sys_init
</UL>

<P><STRONG><a name="[21f]"></a>md_rcu_disable_hosc_css</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, md_rcu.o(.text.md_rcu_disable_hosc_css))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = md_rcu_disable_hosc_css
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_rcu_sys_init
</UL>

<P><STRONG><a name="[220]"></a>md_rcu_set_current_system_frequency</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, md_rcu.o(.text.md_rcu_set_current_system_frequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = md_rcu_set_current_system_frequency
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_rcu_sys_init
</UL>

<P><STRONG><a name="[1ff]"></a>md_rcu_set_pll_source</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, md_rcu.o(.text.md_rcu_set_pll_source))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = md_rcu_set_pll_source
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_rcu_pll0_init
</UL>

<P><STRONG><a name="[200]"></a>md_rcu_set_pll_prediv</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, md_rcu.o(.text.md_rcu_set_pll_prediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = md_rcu_set_pll_prediv
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_rcu_pll0_init
</UL>

<P><STRONG><a name="[201]"></a>md_rcu_set_pll0_fm</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, md_rcu.o(.text.md_rcu_set_pll0_fm))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = md_rcu_set_pll0_fm
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_rcu_pll0_init
</UL>

<P><STRONG><a name="[203]"></a>md_rcu_set_pll0_fn</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, md_rcu.o(.text.md_rcu_set_pll0_fn))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = md_rcu_set_pll0_fn
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_rcu_pll0_init
</UL>

<P><STRONG><a name="[204]"></a>md_rcu_set_pll0_fk</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, md_rcu.o(.text.md_rcu_set_pll0_fk))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = md_rcu_set_pll0_fk
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_rcu_pll0_init
</UL>

<P><STRONG><a name="[230]"></a>md_uart_set_baudrate</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, md_uart.o(.text.md_uart_set_baudrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = md_uart_set_baudrate
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_uart_setting_baudrate
</UL>

<P><STRONG><a name="[226]"></a>md_uart_disable_tx</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, md_uart.o(.text.md_uart_disable_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = md_uart_disable_tx
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_uart_init
</UL>

<P><STRONG><a name="[227]"></a>md_uart_disable_rx</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, md_uart.o(.text.md_uart_disable_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = md_uart_disable_rx
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_uart_init
</UL>

<P><STRONG><a name="[229]"></a>md_uart_set_bitorder_msb</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, md_uart.o(.text.md_uart_set_bitorder_msb))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = md_uart_set_bitorder_msb
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_uart_init
</UL>

<P><STRONG><a name="[22a]"></a>md_uart_set_bitorder_lsb</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, md_uart.o(.text.md_uart_set_bitorder_lsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = md_uart_set_bitorder_lsb
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_uart_init
</UL>

<P><STRONG><a name="[22b]"></a>md_uart_set_stop</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, md_uart.o(.text.md_uart_set_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = md_uart_set_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_uart_init
</UL>

<P><STRONG><a name="[22c]"></a>md_uart_set_datawidth</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, md_uart.o(.text.md_uart_set_datawidth))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = md_uart_set_datawidth
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_uart_init
</UL>

<P><STRONG><a name="[22d]"></a>md_uart_set_parity</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, md_uart.o(.text.md_uart_set_parity))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = md_uart_set_parity
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_uart_init
</UL>

<P><STRONG><a name="[22e]"></a>md_uart_enable_tx</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, md_uart.o(.text.md_uart_enable_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = md_uart_enable_tx
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_uart_init
</UL>

<P><STRONG><a name="[22f]"></a>md_uart_enable_rx</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, md_uart.o(.text.md_uart_enable_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = md_uart_enable_rx
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_uart_init
</UL>

<P><STRONG><a name="[147]"></a>default_layer_state_set</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, action_layer.o(.text.default_layer_state_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = default_layer_state_set &rArr; default_layer_state_set_kb &rArr; default_layer_state_set_user
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_layer_debug
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_layer_state_set_kb
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_layer_xor
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_layer_and
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_layer_or
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_layer_set
</UL>

<P><STRONG><a name="[a5]"></a>IS_EVENT</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, action.o(.text.IS_EVENT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IS_EVENT
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_exec
</UL>

<P><STRONG><a name="[a8]"></a>IS_NOEVENT</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, action.o(.text.IS_NOEVENT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IS_NOEVENT
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_record
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_exec
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_tap_record
</UL>

<P><STRONG><a name="[27b]"></a>IS_KEYEVENT</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, action.o(.text.IS_KEYEVENT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IS_KEYEVENT
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_record_tap_hint
</UL>

<P><STRONG><a name="[178]"></a>get_mods_for_report</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, action_util.o(.text.get_mods_for_report))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = get_mods_for_report &rArr; clear_oneshot_mods &rArr; oneshot_mods_changed_kb &rArr; oneshot_mods_changed_user
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_oneshot_mods
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;has_anykey
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_6kro_report
</UL>

<P><STRONG><a name="[b0]"></a>process_tapping</STRONG> (Thumb, 1724 bytes, Stack size 216 bytes, action_tapping.o(.text.process_tapping))
<BR><BR>[Stack]<UL><LI>Max Depth = 596<LI>Call Chain = process_tapping &rArr; waiting_buffer_scan_tap &rArr; process_record &rArr; process_record_handler &rArr; process_action &rArr;  process_record (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_record_tap_hint
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_record
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_event
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layer_switch_get_action
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;waiting_buffer_typed
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_tapping_key
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;waiting_buffer_scan_tap
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IS_NOEVENT
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IS_EVENT
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_tap_record
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_tapping_process
</UL>

<P><STRONG><a name="[b1]"></a>IS_EVENT</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, action_tapping.o(.text.IS_EVENT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IS_EVENT
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_tapping_process
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;waiting_buffer_scan_tap
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_tapping
</UL>

<P><STRONG><a name="[b3]"></a>waiting_buffer_enq</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, action_tapping.o(.text.waiting_buffer_enq))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = waiting_buffer_enq &rArr; debug_waiting_buffer &rArr; debug_record &rArr; debug_event
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_waiting_buffer
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IS_NOEVENT
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_tapping_process
</UL>

<P><STRONG><a name="[b5]"></a>waiting_buffer_clear</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, action_tapping.o(.text.waiting_buffer_clear))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_tapping_process
</UL>

<P><STRONG><a name="[27c]"></a>IS_NOEVENT</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, action_tapping.o(.text.IS_NOEVENT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IS_NOEVENT
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;waiting_buffer_enq
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_tapping
</UL>

<P><STRONG><a name="[27d]"></a>waiting_buffer_scan_tap</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, action_tapping.o(.text.waiting_buffer_scan_tap))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = waiting_buffer_scan_tap &rArr; process_record &rArr; process_record_handler &rArr; process_action &rArr;  process_record (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_record
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_waiting_buffer
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IS_EVENT
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_tapping
</UL>

<P><STRONG><a name="[13e]"></a>debug_tapping_key</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, action_tapping.o(.text.debug_tapping_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = debug_tapping_key &rArr; debug_record &rArr; debug_event
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_record
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_tapping
</UL>

<P><STRONG><a name="[27e]"></a>waiting_buffer_typed</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, action_tapping.o(.text.waiting_buffer_typed))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = waiting_buffer_typed
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_tapping
</UL>

<P><STRONG><a name="[13f]"></a>debug_waiting_buffer</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, action_tapping.o(.text.debug_waiting_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = debug_waiting_buffer &rArr; debug_record &rArr; debug_event
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_record
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;waiting_buffer_scan_tap
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;waiting_buffer_enq
</UL>

<P><STRONG><a name="[1ba]"></a>matrix_task</STRONG> (Thumb, 472 bytes, Stack size 80 bytes, keyboard.o(.text.matrix_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 828<LI>Call Chain = matrix_task &rArr; generate_tick_event &rArr; action_exec &rArr; action_tapping_process &rArr; process_tapping &rArr; waiting_buffer_scan_tap &rArr; process_record &rArr; process_record_handler &rArr; process_action &rArr;  process_record (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_exec
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_read
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_print
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_get_row
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_scan
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_events
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;should_process_keypress
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_can_read
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;has_ghost_in_row
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_tick_event
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_task
</UL>

<P><STRONG><a name="[172]"></a>generate_tick_event</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, keyboard.o(.text.generate_tick_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 748<LI>Call Chain = generate_tick_event &rArr; action_exec &rArr; action_tapping_process &rArr; process_tapping &rArr; waiting_buffer_scan_tap &rArr; process_record &rArr; process_record_handler &rArr; process_action &rArr;  process_record (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_exec
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_task
</UL>

<P><STRONG><a name="[1ee]"></a>has_ghost_in_row</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, keyboard.o(.text.has_ghost_in_row))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = has_ghost_in_row
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_task
</UL>

<P><STRONG><a name="[1de]"></a>unselect_rows</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, matrix.o(.text.unselect_rows))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = unselect_rows &rArr; unselect_row &rArr; setPinInputHigh_atomic &rArr; __interrupt_enable__ &rArr; chSysUnlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unselect_row
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_init_pins
</UL>

<P><STRONG><a name="[1df]"></a>setPinInputHigh_atomic</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, matrix.o(.text.setPinInputHigh_atomic))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = setPinInputHigh_atomic &rArr; __interrupt_enable__ &rArr; chSysUnlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pal_lld_setgroupmode
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__interrupt_enable__
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__interrupt_disable__
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_init_pins
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unselect_row
</UL>

<P><STRONG><a name="[1e6]"></a>unselect_row</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, matrix.o(.text.unselect_row))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = unselect_row &rArr; setPinInputHigh_atomic &rArr; __interrupt_enable__ &rArr; chSysUnlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPinInputHigh_atomic
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_read_cols_on_row
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unselect_rows
</UL>

<P><STRONG><a name="[80]"></a>__interrupt_disable__</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, matrix.o(.text.__interrupt_disable__))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __interrupt_disable__ &rArr; chSysLock &rArr; port_lock
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSysLock
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPinOutput_writeLow
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPinInputHigh_atomic
</UL>

<P><STRONG><a name="[82]"></a>__interrupt_enable__</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, matrix.o(.text.__interrupt_enable__))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __interrupt_enable__ &rArr; chSysUnlock
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSysUnlock
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPinOutput_writeLow
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPinInputHigh_atomic
</UL>

<P><STRONG><a name="[1e3]"></a>select_row</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, matrix.o(.text.select_row))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = select_row &rArr; setPinOutput_writeLow &rArr; __interrupt_enable__ &rArr; chSysUnlock
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPinOutput_writeLow
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_read_cols_on_row
</UL>

<P><STRONG><a name="[1e5]"></a>readMatrixPin</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, matrix.o(.text.readMatrixPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = readMatrixPin
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_read_cols_on_row
</UL>

<P><STRONG><a name="[297]"></a>setPinOutput_writeLow</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, matrix.o(.text.setPinOutput_writeLow))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = setPinOutput_writeLow &rArr; __interrupt_enable__ &rArr; chSysUnlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pal_lld_setgroupmode
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__interrupt_enable__
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__interrupt_disable__
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_row
</UL>

<P><STRONG><a name="[81]"></a>chSysLock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, matrix.o(.text.chSysLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = chSysLock &rArr; port_lock
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__interrupt_disable__
</UL>

<P><STRONG><a name="[83]"></a>chSysUnlock</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, matrix.o(.text.chSysUnlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = chSysUnlock
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__interrupt_enable__
</UL>

<P><STRONG><a name="[e1]"></a>port_lock</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, matrix.o(.text.port_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = port_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSysLock
</UL>

<P><STRONG><a name="[fe]"></a>port_unlock</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, matrix.o(.text.port_unlock))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSysUnlock
</UL>

<P><STRONG><a name="[51]"></a>null_sendchar_func</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, print.o(.text.null_sendchar_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = null_sendchar_func
</UL>
<BR>[Address Reference Count : 1]<UL><LI> print.o(.data.func)
</UL>
<P><STRONG><a name="[231]"></a>notify_usb_device_state_change</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, usb_device_state.o(.text.notify_usb_device_state_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = notify_usb_device_state_change &rArr; notify_usb_device_state_change_kb &rArr; notify_usb_device_state_change_user
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notify_usb_device_state_change_kb
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_device_state_init
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_device_state_set_reset
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_device_state_set_resume
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_device_state_set_suspend
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_device_state_set_configuration
</UL>

<P><STRONG><a name="[242]"></a>osalEventObjectInit</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, usb_driver.o(.text.osalEventObjectInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = osalEventObjectInit &rArr; chEvtObjectInit
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chEvtObjectInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmkusbObjectInit
</UL>

<P><STRONG><a name="[38]"></a>ibnotify</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, usb_driver.o(.text.ibnotify))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = ibnotify &rArr; qmkusb_start_receive &rArr; usbStartReceiveI &rArr; usb_lld_start_out &rArr; usbd_ep_start_read &rArr; musb_set_active_ep
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmkusb_start_receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_driver.o(.text.qmkusbObjectInit)
</UL>
<P><STRONG><a name="[39]"></a>obnotify</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, usb_driver.o(.text.obnotify))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = obnotify &rArr; usbStartTransmitI &rArr; usb_lld_start_in &rArr; usbd_ep_start_write &rArr; usbd_write_packet &rArr; usb_ep_in_data_avail &rArr; es_usbd_ep_tx_ready_state
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbStartTransmitI
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obqGetFullBufferI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_driver.o(.text.qmkusbObjectInit)
</UL>
<P><STRONG><a name="[243]"></a>chEvtObjectInit</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, usb_driver.o(.text.chEvtObjectInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = chEvtObjectInit
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalEventObjectInit
</UL>

<P><STRONG><a name="[195]"></a>qmkusb_start_receive</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, usb_driver.o(.text.qmkusb_start_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = qmkusb_start_receive &rArr; usbStartReceiveI &rArr; usb_lld_start_out &rArr; usbd_ep_start_read &rArr; musb_set_active_ep
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbStartReceiveI
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ibqGetEmptyBufferI
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmkusbConfigureHookI
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ibnotify
</UL>

<P><STRONG><a name="[246]"></a>osalSysLock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, usb_driver.o(.text.osalSysLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = osalSysLock &rArr; chSysLock &rArr; port_lock
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSysLock
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmkusbStart
</UL>

<P><STRONG><a name="[249]"></a>osalSysUnlock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, usb_driver.o(.text.osalSysUnlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osalSysUnlock &rArr; chSysUnlock
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSysUnlock
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmkusbStart
</UL>

<P><STRONG><a name="[e2]"></a>chSysLock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, usb_driver.o(.text.chSysLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = chSysLock &rArr; port_lock
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalSysLock
</UL>

<P><STRONG><a name="[ff]"></a>chSysUnlock</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, usb_driver.o(.text.chSysUnlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = chSysUnlock
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalSysUnlock
</UL>

<P><STRONG><a name="[241]"></a>osalEventBroadcastFlagsI</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, usb_driver.o(.text.osalEventBroadcastFlagsI))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = osalEventBroadcastFlagsI &rArr; chEvtBroadcastFlagsI &rArr; chEvtSignalI &rArr; chSchReadyI &rArr; __sch_ready_behind &rArr; ch_pqueue_insert_behind
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chEvtBroadcastFlagsI
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmkusbConfigureHookI
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmkusbWakeupHookI
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmkusbSuspendHookI
</UL>

<P><STRONG><a name="[24b]"></a>osalThreadDequeueAllI</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, usb_driver.o(.text.osalThreadDequeueAllI))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = osalThreadDequeueAllI &rArr; chThdDequeueAllI &rArr; chThdDoDequeueNextI &rArr; chSchReadyI &rArr; __sch_ready_behind &rArr; ch_pqueue_insert_behind
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdDequeueAllI
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmkusbSuspendHookI
</UL>

<P><STRONG><a name="[44]"></a>_write</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, usb_driver.o(.text._write))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = _write &rArr; obqWriteTimeout &rArr; obqGetEmptyBufferTimeoutS &rArr; osalThreadEnqueueTimeoutS &rArr; chThdEnqueueTimeoutS &rArr; chSchGoSleepTimeoutS &rArr; chVTDoSetI &rArr; vt_enqueue &rArr; ch_dlist_insert &rArr; ch_dlist_insert_before
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obqWriteTimeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_driver.o(.rodata.vmt)
</UL>
<P><STRONG><a name="[45]"></a>_read</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, usb_driver.o(.text._read))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = _read &rArr; ibqReadTimeout &rArr; ibqGetFullBufferTimeoutS &rArr; osalThreadEnqueueTimeoutS &rArr; chThdEnqueueTimeoutS &rArr; chSchGoSleepTimeoutS &rArr; chVTDoSetI &rArr; vt_enqueue &rArr; ch_dlist_insert &rArr; ch_dlist_insert_before
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ibqReadTimeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_driver.o(.rodata.vmt)
</UL>
<P><STRONG><a name="[46]"></a>_put</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, usb_driver.o(.text._put))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = _put &rArr; obqPutTimeout &rArr; obqGetEmptyBufferTimeoutS &rArr; osalThreadEnqueueTimeoutS &rArr; chThdEnqueueTimeoutS &rArr; chSchGoSleepTimeoutS &rArr; chVTDoSetI &rArr; vt_enqueue &rArr; ch_dlist_insert &rArr; ch_dlist_insert_before
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obqPutTimeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_driver.o(.rodata.vmt)
</UL>
<P><STRONG><a name="[47]"></a>_get</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, usb_driver.o(.text._get))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = _get &rArr; ibqGetTimeout &rArr; ibqGetFullBufferTimeoutS &rArr; osalThreadEnqueueTimeoutS &rArr; chThdEnqueueTimeoutS &rArr; chSchGoSleepTimeoutS &rArr; chVTDoSetI &rArr; vt_enqueue &rArr; ch_dlist_insert &rArr; ch_dlist_insert_before
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ibqGetTimeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_driver.o(.rodata.vmt)
</UL>
<P><STRONG><a name="[48]"></a>_putt</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, usb_driver.o(.text._putt))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = _putt &rArr; obqPutTimeout &rArr; obqGetEmptyBufferTimeoutS &rArr; osalThreadEnqueueTimeoutS &rArr; chThdEnqueueTimeoutS &rArr; chSchGoSleepTimeoutS &rArr; chVTDoSetI &rArr; vt_enqueue &rArr; ch_dlist_insert &rArr; ch_dlist_insert_before
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obqPutTimeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_driver.o(.rodata.vmt)
</UL>
<P><STRONG><a name="[49]"></a>_gett</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, usb_driver.o(.text._gett))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = _gett &rArr; ibqGetTimeout &rArr; ibqGetFullBufferTimeoutS &rArr; osalThreadEnqueueTimeoutS &rArr; chThdEnqueueTimeoutS &rArr; chSchGoSleepTimeoutS &rArr; chVTDoSetI &rArr; vt_enqueue &rArr; ch_dlist_insert &rArr; ch_dlist_insert_before
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ibqGetTimeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_driver.o(.rodata.vmt)
</UL>
<P><STRONG><a name="[4a]"></a>_writet</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, usb_driver.o(.text._writet))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = _writet &rArr; obqWriteTimeout &rArr; obqGetEmptyBufferTimeoutS &rArr; osalThreadEnqueueTimeoutS &rArr; chThdEnqueueTimeoutS &rArr; chSchGoSleepTimeoutS &rArr; chVTDoSetI &rArr; vt_enqueue &rArr; ch_dlist_insert &rArr; ch_dlist_insert_before
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obqWriteTimeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_driver.o(.rodata.vmt)
</UL>
<P><STRONG><a name="[4b]"></a>_readt</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, usb_driver.o(.text._readt))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = _readt &rArr; ibqReadTimeout &rArr; ibqGetFullBufferTimeoutS &rArr; osalThreadEnqueueTimeoutS &rArr; chThdEnqueueTimeoutS &rArr; chSchGoSleepTimeoutS &rArr; chVTDoSetI &rArr; vt_enqueue &rArr; ch_dlist_insert &rArr; ch_dlist_insert_before
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ibqReadTimeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_driver.o(.rodata.vmt)
</UL>
<P><STRONG><a name="[e3]"></a>port_lock</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, usb_driver.o(.text.port_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = port_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSysLock
</UL>

<P><STRONG><a name="[100]"></a>port_unlock</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usb_driver.o(.text.port_unlock))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSysUnlock
</UL>

<P><STRONG><a name="[2b7]"></a>usb_event_queue_dequeue</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, usb_main.o(.text.usb_event_queue_dequeue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usb_event_queue_dequeue
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_event_queue_task
</UL>

<P><STRONG><a name="[2b8]"></a>usb_event_suspend_handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, usb_main.o(.text.usb_event_suspend_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = usb_event_suspend_handler &rArr; usb_device_state_set_suspend &rArr; notify_usb_device_state_change &rArr; notify_usb_device_state_change_kb &rArr; notify_usb_device_state_change_user
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_device_state_set_suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_event_queue_task
</UL>

<P><STRONG><a name="[2b9]"></a>usb_event_wakeup_handler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usb_main.o(.text.usb_event_wakeup_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = usb_event_wakeup_handler &rArr; usb_device_state_set_resume &rArr; notify_usb_device_state_change &rArr; notify_usb_device_state_change_kb &rArr; notify_usb_device_state_change_user
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_device_state_set_resume
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suspend_wakeup_init
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_event_queue_task
</UL>

<P><STRONG><a name="[1a6]"></a>chVTObjectInit</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, usb_main.o(.text.chVTObjectInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = chVTObjectInit
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_usb_driver
</UL>

<P><STRONG><a name="[247]"></a>osalSysLock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, usb_main.o(.text.osalSysLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = osalSysLock &rArr; chSysLock &rArr; port_lock
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSysLock
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_report
</UL>

<P><STRONG><a name="[24a]"></a>osalSysUnlock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, usb_main.o(.text.osalSysUnlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osalSysUnlock &rArr; chSysUnlock
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSysUnlock
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_report
</UL>

<P><STRONG><a name="[24d]"></a>osalThreadSuspendTimeoutS</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, usb_main.o(.text.osalThreadSuspendTimeoutS))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = osalThreadSuspendTimeoutS &rArr; chThdSuspendTimeoutS &rArr; chSchGoSleepTimeoutS &rArr; chVTDoSetI &rArr; vt_enqueue &rArr; ch_dlist_insert &rArr; ch_dlist_insert_before
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdSuspendTimeoutS
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_report
</UL>

<P><STRONG><a name="[e4]"></a>chSysLock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, usb_main.o(.text.chSysLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = chSysLock &rArr; port_lock
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalSysLock
</UL>

<P><STRONG><a name="[101]"></a>chSysUnlock</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, usb_main.o(.text.chSysUnlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = chSysUnlock
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalSysUnlock
</UL>

<P><STRONG><a name="[40]"></a>usb_event_cb</STRONG> (Thumb, 372 bytes, Stack size 40 bytes, usb_main.o(.text.usb_event_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = usb_event_cb &rArr; qmkusbConfigureHookI &rArr; qmkusb_start_receive &rArr; usbStartReceiveI &rArr; usb_lld_start_out &rArr; usbd_ep_start_read &rArr; musb_set_active_ep
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbInitEndpointI
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSysLockFromISR
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_event_queue_enqueue
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalSysUnlockFromISR
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalSysLockFromISR
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmkusbConfigureHookI
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmkusbWakeupHookI
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmkusbSuspendHookI
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSysUnlockFromISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_main.o(.rodata.usbcfg)
</UL>
<P><STRONG><a name="[1ab]"></a>osalSysLockFromISR</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, usb_main.o(.text.osalSysLockFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = osalSysLockFromISR &rArr; chSysLockFromISR &rArr; port_lock_from_isr &rArr; port_lock
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSysLockFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_event_cb
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_sof_cb
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_idle_timer_cb
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_requests_hook_cb
</UL>

<P><STRONG><a name="[1ac]"></a>osalSysUnlockFromISR</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, usb_main.o(.text.osalSysUnlockFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osalSysUnlockFromISR &rArr; chSysUnlockFromISR &rArr; port_unlock_from_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSysUnlockFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_event_cb
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_sof_cb
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_idle_timer_cb
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_requests_hook_cb
</UL>

<P><STRONG><a name="[2b6]"></a>usb_event_queue_enqueue</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, usb_main.o(.text.usb_event_queue_enqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = usb_event_queue_enqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_event_cb
</UL>

<P><STRONG><a name="[f1]"></a>chSysLockFromISR</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, usb_main.o(.text.chSysLockFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = chSysLockFromISR &rArr; port_lock_from_isr &rArr; port_lock
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_lock_from_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalSysLockFromISR
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_event_cb
</UL>

<P><STRONG><a name="[10e]"></a>chSysUnlockFromISR</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, usb_main.o(.text.chSysUnlockFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = chSysUnlockFromISR &rArr; port_unlock_from_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_unlock_from_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalSysUnlockFromISR
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_event_cb
</UL>

<P><STRONG><a name="[41]"></a>usb_get_descriptor_cb</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, usb_main.o(.text.usb_get_descriptor_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = usb_get_descriptor_cb &rArr; get_usb_descriptor
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_usb_descriptor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_main.o(.rodata.usbcfg)
</UL>
<P><STRONG><a name="[42]"></a>usb_requests_hook_cb</STRONG> (Thumb, 688 bytes, Stack size 56 bytes, usb_main.o(.text.usb_requests_hook_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = usb_requests_hook_cb &rArr; chVTSetI &rArr; chVTDoSetI &rArr; vt_enqueue &rArr; ch_dlist_insert &rArr; ch_dlist_insert_before
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalSysUnlockFromISR
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalSysLockFromISR
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmkusbRequestsHook
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chVTSetI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_main.o(.rodata.usbcfg)
</UL>
<P><STRONG><a name="[12b]"></a>chVTSetI</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, usb_main.o(.text.chVTSetI))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = chVTSetI &rArr; chVTDoSetI &rArr; vt_enqueue &rArr; ch_dlist_insert &rArr; ch_dlist_insert_before
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chVTDoSetI
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chVTResetI
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_idle_timer_cb
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_requests_hook_cb
</UL>

<P><STRONG><a name="[36]"></a>keyboard_idle_timer_cb</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, usb_main.o(.text.keyboard_idle_timer_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = keyboard_idle_timer_cb &rArr; usbStartTransmitI &rArr; usb_lld_start_in &rArr; usbd_ep_start_write &rArr; usbd_write_packet &rArr; usb_ep_in_data_avail &rArr; es_usbd_ep_tx_ready_state
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbStartTransmitI
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalSysUnlockFromISR
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalSysLockFromISR
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chVTSetI
</UL>
<BR>[Address Reference Count : 2]<UL><LI> usb_main.o(.text.usb_requests_hook_cb)
<LI> usb_main.o(.text.keyboard_idle_timer_cb)
</UL>
<P><STRONG><a name="[3b]"></a>set_led_transfer_cb</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, usb_main.o(.text.set_led_transfer_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = set_led_transfer_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_main.o(.text.usb_requests_hook_cb)
</UL>
<P><STRONG><a name="[43]"></a>usb_sof_cb</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, usb_main.o(.text.usb_sof_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = usb_sof_cb &rArr; qmkusbSOFHookI &rArr; usbStartTransmitI &rArr; usb_lld_start_in &rArr; usbd_ep_start_write &rArr; usbd_write_packet &rArr; usb_ep_in_data_avail &rArr; es_usbd_ep_tx_ready_state
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalSysUnlockFromISR
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalSysLockFromISR
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmkusbSOFHookI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_main.o(.rodata.usbcfg)
</UL>
<P><STRONG><a name="[f2]"></a>port_lock_from_isr</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, usb_main.o(.text.port_lock_from_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = port_lock_from_isr &rArr; port_lock
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSysLockFromISR
</UL>

<P><STRONG><a name="[10f]"></a>port_unlock_from_isr</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, usb_main.o(.text.port_unlock_from_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = port_unlock_from_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSysUnlockFromISR
</UL>

<P><STRONG><a name="[3f]"></a>dummy_usb_cb</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, usb_main.o(.text.dummy_usb_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dummy_usb_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_main.o(.rodata.shared_ep_config)
</UL>
<P><STRONG><a name="[e5]"></a>port_lock</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, usb_main.o(.text.port_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = port_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSysLock
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_lock_from_isr
</UL>

<P><STRONG><a name="[102]"></a>port_unlock</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usb_main.o(.text.port_unlock))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSysUnlock
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_unlock_from_isr
</UL>

<P><STRONG><a name="[125]"></a>chVTResetI</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, usb_main.o(.text.chVTResetI))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = chVTResetI &rArr; chVTDoResetI &rArr; ch_dlist_dequeue
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chVTDoResetI
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chVTIsArmedI
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chVTSetI
</UL>

<P><STRONG><a name="[126]"></a>chVTIsArmedI</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, usb_main.o(.text.chVTIsArmedI))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = chVTIsArmedI
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chVTResetI
</UL>

<P><STRONG><a name="[2a6]"></a>chVTObjectInit</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, timer.o(.text.chVTObjectInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = chVTObjectInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
</UL>

<P><STRONG><a name="[129]"></a>chVTSet</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, timer.o(.text.chVTSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = chVTSet &rArr; chVTSetI &rArr; chVTDoSetI &rArr; vt_enqueue &rArr; ch_dlist_insert &rArr; ch_dlist_insert_before
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chVTSetI
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSysUnlock
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSysLock
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
</UL>

<P><STRONG><a name="[3a]"></a>update_fn</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, timer.o(.text.update_fn))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = update_fn &rArr; chVTSetI &rArr; chVTDoSetI &rArr; vt_enqueue &rArr; ch_dlist_insert &rArr; ch_dlist_insert_before
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSysUnlockFromISR
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSysLockFromISR
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chVTSetI
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_system_time_ticks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer.o(.text.update_fn)
</UL>
<P><STRONG><a name="[e6]"></a>chSysLock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, timer.o(.text.chSysLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = chSysLock &rArr; port_lock
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_read32
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_clear
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chVTSet
</UL>

<P><STRONG><a name="[17b]"></a>get_system_time_ticks</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, timer.o(.text.get_system_time_ticks))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_system_time_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chVTGetSystemTimeX
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_read32
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_clear
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_fn
</UL>

<P><STRONG><a name="[103]"></a>chSysUnlock</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, timer.o(.text.chSysUnlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = chSysUnlock
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_read32
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_clear
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chVTSet
</UL>

<P><STRONG><a name="[12a]"></a>chVTSetI</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, timer.o(.text.chVTSetI))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = chVTSetI &rArr; chVTDoSetI &rArr; vt_enqueue &rArr; ch_dlist_insert &rArr; ch_dlist_insert_before
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chVTDoSetI
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chVTResetI
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_fn
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chVTSet
</UL>

<P><STRONG><a name="[f3]"></a>chSysLockFromISR</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, timer.o(.text.chSysLockFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = chSysLockFromISR &rArr; port_lock_from_isr &rArr; port_lock
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_lock_from_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_fn
</UL>

<P><STRONG><a name="[110]"></a>chSysUnlockFromISR</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, timer.o(.text.chSysUnlockFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = chSysUnlockFromISR &rArr; port_unlock_from_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_unlock_from_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_fn
</UL>

<P><STRONG><a name="[e7]"></a>port_lock</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, timer.o(.text.port_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = port_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_lock_from_isr
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSysLock
</UL>

<P><STRONG><a name="[17c]"></a>chVTGetSystemTimeX</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, timer.o(.text.chVTGetSystemTimeX))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_system_time_ticks
</UL>

<P><STRONG><a name="[104]"></a>port_unlock</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, timer.o(.text.port_unlock))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_unlock_from_isr
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSysUnlock
</UL>

<P><STRONG><a name="[127]"></a>chVTResetI</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, timer.o(.text.chVTResetI))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = chVTResetI &rArr; chVTDoResetI &rArr; ch_dlist_dequeue
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chVTDoResetI
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chVTIsArmedI
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chVTSetI
</UL>

<P><STRONG><a name="[128]"></a>chVTIsArmedI</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, timer.o(.text.chVTIsArmedI))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = chVTIsArmedI
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chVTResetI
</UL>

<P><STRONG><a name="[f4]"></a>port_lock_from_isr</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, timer.o(.text.port_lock_from_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = port_lock_from_isr &rArr; port_lock
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSysLockFromISR
</UL>

<P><STRONG><a name="[111]"></a>port_unlock_from_isr</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, timer.o(.text.port_unlock_from_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = port_unlock_from_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSysUnlockFromISR
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
